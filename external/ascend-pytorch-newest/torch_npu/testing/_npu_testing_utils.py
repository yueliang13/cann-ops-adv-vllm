import unittest
from collections import defaultdict
import torch
from torch.testing._internal.common_methods_invocations import op_db, python_ref_db
from torch.testing._internal.opinfo.core import DecorateInfo

"""
strategy: Due to the restriction of NPU operators. 
patch the data classes to avoid unsupported cases.
"""

skip_list = {
'__rmul__': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_compare_cpu', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_non_standard_bool_values', dtypes=(torch.bool,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,))], 
'__rpow__': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_compare_cpu', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,))], 
'__rmatmul__': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_compare_cpu', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_crossref_backward_amp', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_crossref_backward_no_amp', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_forward_ad', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_operator', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,))], 
'_refs._conversions.chalf': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_compare_cpu', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,))], 
'_refs._conversions.complex': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_compare_cpu', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,))], 
'_refs._conversions.double': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_compare_cpu', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,))], 
'_refs._conversions.half': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_compare_cpu', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,))], 
'_refs._conversions.polar': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_compare_cpu', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,))], 
'_refs.atan2': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_compare_cpu', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,))], 
'_refs.copysign': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_compare_cpu', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,))], 
'_refs.div': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_compare_cpu', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,))], 
'_refs.index_copy': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_compare_cpu', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,))], 
'_refs.istft': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_compare_cpu', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,))], 
'_refs.linalg.norm': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_compare_cpu', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,))], 
'_refs.linalg.svd': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_compare_cpu', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,))], 
'_refs.linalg.vector_norm': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_compare_cpu', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,))], 
'_refs.log_softmax': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_compare_cpu', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,))], 
'_refs.logaddexp': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_compare_cpu', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,))], 
'_refs.logsumexp': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_compare_cpu', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,))], 
'_refs.mul': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_compare_cpu', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,))], 
'_refs.nn.functional.log_softmax': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_compare_cpu', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,))], 
'_refs.nn.functional.softmax': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_compare_cpu', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,))], 
'_refs.nn.functional.hardtanh': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_compare_cpu', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,))], 
'_refs.nn.functional.hinge_embedding_loss': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_compare_cpu', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,))], 
'_refs.nn.functional.softmin': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_compare_cpu', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,))], 
'_refs.nn.functional.margin_ranking_loss': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_compare_cpu', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,))], 
'_refs.nn.functional.nll_loss': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_compare_cpu', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,))], 
'_refs.nn.functional.relu6': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_compare_cpu', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,))], 
'_refs.nn.functional.softshrink': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_compare_cpu', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,))], 
'_refs.special.log_softmax': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_compare_cpu', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,))], 
'_refs.special.softmax': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_compare_cpu', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,))], 
'_refs.softmax': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_compare_cpu', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,))], 
'_refs.special.xlog1py': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_compare_cpu', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,))], 
'_refs.std_mean': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_compare_cpu', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,))], 
'_refs.special.zeta': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_compare_cpu', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,))], 
'_refs.to': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_compare_cpu', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,))], 
'_refs.var_mean': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_compare_cpu', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,))], 
'addcdiv': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_pointwise_ops', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_crossref_backward_no_amp', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_crossref_backward_amp', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_autocast', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_operator', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_forward_ad', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_compare_cpu', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,))], 
'addcmul': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_pointwise_ops', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_crossref_backward_no_amp', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_crossref_backward_amp', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_autocast', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_operator', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_forward_ad', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_compare_cpu', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,))], 
'_refs.xlogy': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_compare_cpu', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,))], 
'addmm': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_pointwise_ops', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_compare_cpu', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_autocast', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_crossref_backward_amp', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_crossref_backward_no_amp', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_forward_ad', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_operator', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,))], 
'addmv': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_pointwise_ops', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_crossref_backward_no_amp', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_operator', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_forward_ad', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_compare_cpu', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_crossref_backward_amp', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,))], 
'addr': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_pointwise_ops', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_crossref_backward_no_amp', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_autocast', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_operator', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_forward_ad', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_compare_cpu', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_crossref_backward_amp', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_non_standard_bool_values', dtypes=(torch.bool,))], 
'argsort': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_compare_cpu', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_non_standard_bool_values', dtypes=(torch.bool,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_autocast', dtypes=(torch.float32,))], 
'atan2': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_compare_cpu', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_non_standard_bool_values', dtypes=(torch.bool,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,))], 
'baddbmm': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_compare_cpu', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_crossref_backward_amp', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_crossref_backward_no_amp', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_pointwise_ops', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_forward_ad', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_operator', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_autocast', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake', dtypes=(torch.float32,))], 
'bmm': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_compare_cpu', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_crossref_backward_amp', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_crossref_backward_no_amp', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_pointwise_ops', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_forward_ad', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_operator', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_autocast', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake', dtypes=(torch.float32,))], 
'chalf': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_compare_cpu', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_autocast', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_crossref_backward_amp', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_crossref_backward_no_amp', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_non_standard_bool_values', dtypes=(torch.bool,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_operator', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,))], 
'cholesky_inverse': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_compare_cpu', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_autocast', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_crossref_backward_amp', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_crossref_backward_no_amp', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_forward_ad', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_operator', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_pointwise_ops', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,))], 
'cholesky_solve': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_compare_cpu', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_autocast', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_crossref_backward_amp', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_crossref_backward_no_amp', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_forward_ad', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_operator', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_pointwise_ops', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,))], 
'constant_pad_nd': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_pointwise_ops', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_autocast', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_compare_cpu', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_crossref_backward_amp', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_crossref_backward_no_amp', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_forward_ad', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_non_standard_bool_values', dtypes=(torch.bool,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_operator', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,))], 
'contiguous': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_compare_cpu', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_non_standard_bool_values', dtypes=(torch.bool,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,))], 
'cross': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_compare_cpu', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_forward_ad', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_operator', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,))], 
'dist': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_compare_cpu', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,))], 
'div': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_compare_cpu', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_non_standard_bool_values', dtypes=(torch.bool,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,))], 
'double': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_compare_cpu', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_autocast', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_crossref_backward_amp', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_crossref_backward_no_amp', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_non_standard_bool_values', dtypes=(torch.bool,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,))], 
'einsum': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_compare_cpu', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_crossref_backward_amp', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_operator', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,))], 
'grid_sampler_2d': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_compare_cpu', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_autocast', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_crossref_backward_amp', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_crossref_backward_no_amp', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_operator', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_pointwise_ops', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,))], 
'half': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_compare_cpu', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_crossref_backward_amp', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_crossref_backward_no_amp', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_non_standard_bool_values', dtypes=(torch.bool,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,))], 
'histc': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_compare_cpu', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_operator', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_autocast', dtypes=(torch.float32,))], 
'index_fill': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_compare_cpu', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_autocast', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_crossref_backward_amp', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_crossref_backward_no_amp', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_forward_ad', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_non_standard_bool_values', dtypes=(torch.bool,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_operator', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,))], 
'index_add': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_pointwise_ops', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_compare_cpu', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_crossref_backward_amp', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_crossref_backward_no_amp', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_forward_ad', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_non_standard_bool_values', dtypes=(torch.bool,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_operator', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,))], 
'istft': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_compare_cpu', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.complex64,))], 
'inner': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_compare_cpu', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_operator', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,))], 
'kthvalue': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_compare_cpu', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_autocast', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_crossref_backward_amp', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_crossref_backward_no_amp', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_forward_ad', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_operator', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_pointwise_ops', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,))], 
'linalg.cholesky': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_compare_cpu', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_autocast', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_crossref_backward_amp', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_crossref_backward_no_amp', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_forward_ad', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_operator', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,))], 
'linalg.eig': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_compare_cpu', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_crossref_backward_amp', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_crossref_backward_no_amp', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_forward_ad', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_operator', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,))], 
'ldexp': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_compare_cpu', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_non_standard_bool_values', dtypes=(torch.bool,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,))], 
'linalg.inv': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_compare_cpu', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_autocast', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_crossref_backward_amp', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_crossref_backward_no_amp', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_forward_ad', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_operator', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,))], 
'linalg.ldl_factor': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_compare_cpu', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_autocast', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_operator', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,))], 
'linalg.lu_factor': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_compare_cpu', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_autocast', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_crossref_backward_amp', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_crossref_backward_no_amp', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_forward_ad', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_operator', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.complex64,))], 
'linalg.lu_solve': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_compare_cpu', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_autocast', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_crossref_backward_amp', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_crossref_backward_no_amp', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_forward_ad', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_operator', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_pointwise_ops', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.complex64,))], 
'linalg.lstsq': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_compare_cpu', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_crossref_backward_amp', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_crossref_backward_no_amp', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_forward_ad', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_operator', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,))], 
'linalg.lu_factor_ex': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_compare_cpu', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_crossref_backward_amp', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_crossref_backward_no_amp', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_forward_ad', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,))], 
'linalg.lu': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_compare_cpu', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_crossref_backward_amp', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_crossref_backward_no_amp', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_forward_ad', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,))], 
'linalg.matrix_power': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_compare_cpu', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_crossref_backward_amp', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_crossref_backward_no_amp', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_forward_ad', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_operator', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.complex64,))], 
'linalg.matrix_rank': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_compare_cpu', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_autocast', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_operator', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_pointwise_ops', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,))], 
'linalg.multi_dot': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_compare_cpu', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_crossref_backward_amp', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,))], 
'linalg.solve': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_compare_cpu', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_crossref_backward_amp', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_crossref_backward_no_amp', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_forward_ad', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_operator', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.complex64,))], 
'linalg.pinv': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_compare_cpu', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_autocast', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_crossref_backward_no_amp', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_forward_ad', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_operator', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.complex64,))], 
'linalg.solve_triangular': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_compare_cpu', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_crossref_backward_amp', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_crossref_backward_no_amp', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_forward_ad', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_operator', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,))], 
'linspace': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_autocast', dtypes=(torch.float32,))], 
'log_softmax': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_compare_cpu', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_crossref_backward_amp', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_crossref_backward_no_amp', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_forward_ad', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_non_standard_bool_values', dtypes=(torch.bool,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_operator', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_pointwise_ops', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,))], 
'linalg.svd': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_compare_cpu', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_forward_ad', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_operator', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,))], 
'lu_solve': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_compare_cpu', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_crossref_backward_amp', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_crossref_backward_no_amp', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_forward_ad', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_operator', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.complex64,))], 
'logaddexp': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_compare_cpu', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_dtypes')], 
'lu_unpack': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_compare_cpu', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_autocast', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_crossref_backward_amp', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_crossref_backward_no_amp', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_forward_ad', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_operator', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_pointwise_ops', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,))], 
'logsumexp': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_compare_cpu', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_non_standard_bool_values', dtypes=(torch.bool,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,))], 
'masked.logsumexp': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_compare_cpu', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_forward_ad', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_operator', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,))], 
'masked.norm': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_compare_cpu', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_operator', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,))], 
'median': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_compare_cpu', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_autocast', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_crossref_backward_amp', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_crossref_backward_no_amp', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_forward_ad', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_operator', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,))], 
'matmul': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_compare_cpu', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_crossref_backward_amp', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_crossref_backward_no_amp', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_forward_ad', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_operator', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,))], 
'max_pool2d_with_indices_backward': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_compare_cpu', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_autocast', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_crossref_backward_amp', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_crossref_backward_no_amp', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_forward_ad', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_operator', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_pointwise_ops', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,))], 
'mm': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_compare_cpu', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_crossref_backward_amp', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_crossref_backward_no_amp', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_pointwise_ops', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_forward_ad', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_operator', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_autocast', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake', dtypes=(torch.float32,))], 
'mul': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_compare_cpu', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_non_standard_bool_values', dtypes=(torch.bool,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,))], 
'mv': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_compare_cpu', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_crossref_backward_amp', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,))], 
'native_dropout_backward': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_compare_cpu', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_autocast', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_crossref_backward_amp', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_crossref_backward_no_amp', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_non_standard_bool_values', dtypes=(torch.bool,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_operator', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,))], 
'nn.functional.adaptive_avg_pool1d': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_compare_cpu', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_crossref_backward_amp', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_crossref_backward_no_amp', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_forward_ad', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_operator', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,))], 
'nn.functional.adaptive_avg_pool2d': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_compare_cpu', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_crossref_backward_amp', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_crossref_backward_no_amp', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_forward_ad', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,))], 
'nn.functional.adaptive_avg_pool3d': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_compare_cpu', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_crossref_backward_amp', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_crossref_backward_no_amp', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_forward_ad', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_operator', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,))], 
'nn.functional.adaptive_max_pool1d': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_compare_cpu', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_autocast', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_crossref_backward_amp', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_crossref_backward_no_amp', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_forward_ad', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_operator', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,))], 
'nn.functional.adaptive_max_pool2d': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_compare_cpu', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_autocast', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_crossref_backward_amp', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_crossref_backward_no_amp', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_forward_ad', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_operator', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,))], 
'nn.functional.alpha_dropout': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_compare_cpu', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,))], 
'nn.functional.avg_pool1d': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_compare_cpu', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_crossref_backward_amp', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_crossref_backward_no_amp', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_operator', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,))], 
'nn.functional.avg_pool2d': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_compare_cpu', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_crossref_backward_amp', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_crossref_backward_no_amp', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_forward_ad', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_operator', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,))], 
'nn.functional.avg_pool3d': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_compare_cpu', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_crossref_backward_amp', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_crossref_backward_no_amp', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,))], 
'nn.functional.bilinear': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_compare_cpu', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,))], 
'nn.functional.binary_cross_entropy': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_compare_cpu', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_operator', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,))], 
'nn.functional.conv1d': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_compare_cpu', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_crossref_backward_amp', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_operator', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,))], 
'nn.functional.conv2d': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_compare_cpu', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_crossref_backward_amp', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_operator', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,))], 
'nn.functional.conv3d': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_operator', dtypes=(torch.float32,))], 
'nn.functional.fractional_max_pool2d': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,))], 
'nn.functional.fractional_max_pool3d': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,))], 
'nn.functional.embedding_bag': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_compare_cpu', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_crossref_backward_amp', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_crossref_backward_no_amp', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,))], 
'nn.functional.grid_sample': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_compare_cpu', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_operator', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,))], 
'nn.functional.hardshrink': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_compare_cpu', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_autocast', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_crossref_backward_amp', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_crossref_backward_no_amp', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_forward_ad', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_operator', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,))], 
'nn.functional.gaussian_nll_loss': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_compare_cpu', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_crossref_backward_amp', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_crossref_backward_no_amp', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,))], 
'nn.functional.hinge_embedding_loss': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_compare_cpu', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,))], 
'nn.functional.hardtanh': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_compare_cpu', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,))], 
'nn.functional.interpolate': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_compare_cpu', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_crossref_backward_amp', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_crossref_backward_no_amp', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_forward_ad', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_operator', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,))], 
'nn.functional.kl_div': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_compare_cpu', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_crossref_backward_amp', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_crossref_backward_no_amp', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,))], 
'nn.functional.linear': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_compare_cpu', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_crossref_backward_amp', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_crossref_backward_no_amp', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_forward_ad', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_operator', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,))], 
'nn.functional.margin_ranking_loss': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_compare_cpu', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,))], 
'nn.functional.max_pool1d': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_compare_cpu', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_crossref_backward_amp', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_crossref_backward_no_amp', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_forward_ad', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_operator', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,))], 
'nn.functional.max_pool2d': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_compare_cpu', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_autocast', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_crossref_backward_amp', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_crossref_backward_no_amp', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_forward_ad', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_operator', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_pointwise_ops', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,))], 
'nn.functional.max_pool3d': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_compare_cpu', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_autocast', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_crossref_backward_amp', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_crossref_backward_no_amp', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_forward_ad', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_operator', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_pointwise_ops', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,))], 
'nn.functional.max_unpool1d': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_compare_cpu', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_autocast', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_crossref_backward_amp', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_crossref_backward_no_amp', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_forward_ad', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_operator', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_pointwise_ops', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,))], 
'nn.functional.multilabel_margin_loss': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_compare_cpu', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_autocast', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_crossref_backward_amp', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_crossref_backward_no_amp', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_operator', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,))], 
'nn.functional.max_unpool2d': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_compare_cpu', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_autocast', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_crossref_backward_amp', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_crossref_backward_no_amp', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_forward_ad', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_operator', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_pointwise_ops', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,))], 
'nn.functional.max_unpool3d': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_compare_cpu', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_autocast', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_crossref_backward_amp', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_crossref_backward_no_amp', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_forward_ad', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_operator', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_pointwise_ops', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,))], 
'nn.functional.nll_loss': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_compare_cpu', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_crossref_backward_amp', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_crossref_backward_no_amp', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_forward_ad', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,))], 
'nn.functional.one_hot': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.int64,))], 
'nn.functional.pad': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_compare_cpu', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_crossref_backward_amp', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_crossref_backward_no_amp', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_forward_ad', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_non_standard_bool_values', dtypes=(torch.bool,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_operator', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,))], 
'nn.functional.softmin': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_compare_cpu', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_crossref_backward_amp', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_crossref_backward_no_amp', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_forward_ad', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_operator', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,))], 
'nn.functional.relu6': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_compare_cpu', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,))], 
'nn.functional.unfold': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_compare_cpu', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_autocast', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_crossref_backward_amp', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_crossref_backward_no_amp', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_forward_ad', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_operator', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,))], 
'nn.functional.softshrink': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_compare_cpu', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_crossref_backward_amp', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_crossref_backward_no_amp', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_forward_ad', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_operator', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,))], 
'nn.functional.upsample_nearest': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_compare_cpu', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,))], 
'ones_like': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_compare_cpu', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_autocast', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_non_standard_bool_values', dtypes=(torch.bool,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_operator', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,))], 
'pinverse': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_compare_cpu', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_autocast', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_crossref_backward_no_amp', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_forward_ad', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_operator', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,))], 
'polar': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_compare_cpu', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_crossref_backward_amp', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_crossref_backward_no_amp', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_forward_ad', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_operator', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,))], 
'put': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_compare_cpu', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_non_standard_bool_values', dtypes=(torch.bool,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,))], 
'randint': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_compare_cpu', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_autocast', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_operator', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,))], 
'renorm': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_compare_cpu', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_crossref_backward_amp', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_crossref_backward_no_amp', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,))], 
'scatter_add': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_autocast', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_compare_cpu', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_forward_ad', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_non_standard_bool_values', dtypes=(torch.bool,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_operator', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_crossref_backward_amp', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_crossref_backward_no_amp', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_pointwise_ops', dtypes=(torch.float32,))], 
'scatter': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_compare_cpu', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_forward_ad', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_non_standard_bool_values', dtypes=(torch.bool,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_operator', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_crossref_backward_amp', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_crossref_backward_no_amp', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_pointwise_ops', dtypes=(torch.float32,))], 
'softmax': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_compare_cpu', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_autocast', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_crossref_backward_amp', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_crossref_backward_no_amp', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_forward_ad', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_non_standard_bool_values', dtypes=(torch.bool,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_operator', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_pointwise_ops', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,))], 
'sort': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_compare_cpu', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_crossref_backward_amp', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_crossref_backward_no_amp', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_forward_ad', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_non_standard_bool_values', dtypes=(torch.bool,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_operator', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,))], 
'sparse.sampled_addmm': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_compare_cpu', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_crossref_backward_no_amp', dtypes=(torch.float32,))], 
'special.hermite_polynomial_h': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_compare_cpu', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_non_standard_bool_values', dtypes=(torch.bool,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,))], 
'special.zeta': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_compare_cpu', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_non_standard_bool_values', dtypes=(torch.bool,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,))], 
'std_mean': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_compare_cpu', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,))], 
'take': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_compare_cpu', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_forward_ad', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_non_standard_bool_values', dtypes=(torch.bool,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_operator', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,))], 
'topk': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_compare_cpu', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_autocast', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_crossref_backward_amp', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_crossref_backward_no_amp', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_forward_ad', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_operator', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,))], 
'svd': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_compare_cpu', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_forward_ad', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_operator', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,))], 
'tensordot': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_compare_cpu', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_operator', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,))], 
'to': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_compare_cpu', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_autocast', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_crossref_backward_amp', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_crossref_backward_no_amp', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_forward_ad', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_non_standard_bool_values', dtypes=(torch.bool,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_operator', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,))], 
'to_sparse': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_compare_cpu', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_crossref_backward_amp', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_crossref_backward_no_amp', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_non_standard_bool_values', dtypes=(torch.bool,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,))], 
'unique_consecutive': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_compare_cpu', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_non_standard_bool_values', dtypes=(torch.bool,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_operator', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,))], 
'var_mean': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_compare_cpu', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,))], 
'xlogy': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_compare_cpu', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_non_standard_bool_values', dtypes=(torch.bool,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,))], 
'H': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_non_standard_bool_values', dtypes=(torch.bool,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_operator', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,))], 
'T': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_non_standard_bool_values', dtypes=(torch.bool,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_operator', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,))], 
'acosh': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_non_standard_bool_values', dtypes=(torch.bool,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,))], 
'__getitem__': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_non_standard_bool_values', dtypes=(torch.bool,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_operator', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,))], 
'__radd__': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_non_standard_bool_values', dtypes=(torch.bool,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,))], 
'__rand__': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_non_standard_bool_values', dtypes=(torch.bool,))], 
'amin': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_autocast', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_crossref_backward_amp', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_crossref_backward_no_amp', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_forward_ad', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_non_standard_bool_values', dtypes=(torch.bool,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_operator', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,))], 
'aminmax': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_non_standard_bool_values', dtypes=(torch.bool,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_operator', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,))], 
'__rdiv__': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_non_standard_bool_values', dtypes=(torch.bool,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,))], 
'__ror__': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_non_standard_bool_values', dtypes=(torch.bool,))], 
'__rxor__': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_non_standard_bool_values', dtypes=(torch.bool,))], 
'add': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_pointwise_ops', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_operator', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_forward_ad', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_non_standard_bool_values', dtypes=(torch.bool,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,))], 
'all': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_non_standard_bool_values', dtypes=(torch.bool,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,))], 
'asin': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_non_standard_bool_values', dtypes=(torch.bool,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,))], 
'amax': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_autocast', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_crossref_backward_amp', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_crossref_backward_no_amp', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_forward_ad', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_non_standard_bool_values', dtypes=(torch.bool,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_operator', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,))], 
'asinh': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_non_standard_bool_values', dtypes=(torch.bool,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,))], 
'atan': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_non_standard_bool_values', dtypes=(torch.bool,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,))], 
'atanh': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_non_standard_bool_values', dtypes=(torch.bool,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,))], 
'any': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_autocast', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_non_standard_bool_values', dtypes=(torch.bool,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_operator', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.complex64,))], 
'angle': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_non_standard_bool_values', dtypes=(torch.bool,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,))], 
'argwhere': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_non_standard_bool_values', dtypes=(torch.bool,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,))], 
'as_strided': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_compare_cpu', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_non_standard_bool_values', dtypes=(torch.bool,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_operator', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,))], 
'as_strided_scatter': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_non_standard_bool_values', dtypes=(torch.bool,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_pointwise_ops', dtypes=(torch.float32,))], 
'atleast_1d': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_non_standard_bool_values', dtypes=(torch.bool,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,))], 
'atleast_2d': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_non_standard_bool_values', dtypes=(torch.bool,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_operator', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,))], 
'atleast_3d': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_non_standard_bool_values', dtypes=(torch.bool,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_operator', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,))], 
'bfloat16': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_crossref_backward_amp', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_crossref_backward_no_amp', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_non_standard_bool_values', dtypes=(torch.bool,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,))], 
'bitwise_and': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_non_standard_bool_values', dtypes=(torch.bool,))], 
'bitwise_not': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_non_standard_bool_values', dtypes=(torch.bool,))], 
'bitwise_or': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_non_standard_bool_values', dtypes=(torch.bool,))], 
'bitwise_xor': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_non_standard_bool_values', dtypes=(torch.bool,))], 
'block_diag': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_non_standard_bool_values', dtypes=(torch.bool,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,))], 
'bool': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_non_standard_bool_values', dtypes=(torch.bool,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,))], 
'broadcast_tensors': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_non_standard_bool_values', dtypes=(torch.bool,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_operator', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,))], 
'broadcast_to': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_non_standard_bool_values', dtypes=(torch.bool,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_operator', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,))], 
'byte': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_non_standard_bool_values', dtypes=(torch.bool,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,))], 
'cartesian_prod': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_non_standard_bool_values', dtypes=(torch.bool,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_operator', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,))], 
'cat': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_non_standard_bool_values', dtypes=(torch.bool,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,))], 
'cdouble': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_crossref_backward_amp', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_crossref_backward_no_amp', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_forward_ad', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_non_standard_bool_values', dtypes=(torch.bool,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_operator', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,))], 
'cfloat': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_crossref_backward_amp', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_crossref_backward_no_amp', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_non_standard_bool_values', dtypes=(torch.bool,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_operator', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,))], 
'char': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_non_standard_bool_values', dtypes=(torch.bool,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,))], 
'chunk': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_non_standard_bool_values', dtypes=(torch.bool,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_operator', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,))], 
'_chunk_cat': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_non_standard_bool_values', dtypes=(torch.bool,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,))], 
'clamp_max': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_autocast', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_crossref_backward_amp', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_crossref_backward_no_amp', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_forward_ad', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_non_standard_bool_values', dtypes=(torch.bool,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_operator', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_pointwise_ops', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,))], 
'clamp_min': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_autocast', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_crossref_backward_amp', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_crossref_backward_no_amp', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_forward_ad', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_non_standard_bool_values', dtypes=(torch.bool,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_operator', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,))], 
'clone': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_non_standard_bool_values', dtypes=(torch.bool,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,))], 
'cos': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_non_standard_bool_values', dtypes=(torch.bool,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,))], 
'cosh': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_non_standard_bool_values', dtypes=(torch.bool,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,))], 
'cummax': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_non_standard_bool_values', dtypes=(torch.bool,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_crossref_backward_amp', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_crossref_backward_no_amp', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_pointwise_ops', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_forward_ad', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_operator', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_autocast', dtypes=(torch.float32,))], 
'cummin': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_non_standard_bool_values', dtypes=(torch.bool,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_crossref_backward_amp', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_crossref_backward_no_amp', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_pointwise_ops', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_forward_ad', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_operator', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_autocast', dtypes=(torch.float32,))], 
'column_stack': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_non_standard_bool_values', dtypes=(torch.bool,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,))], 
'combinations': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_non_standard_bool_values', dtypes=(torch.bool,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_operator', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,))], 
'diag': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_autocast', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_crossref_backward_amp', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_crossref_backward_no_amp', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_forward_ad', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_non_standard_bool_values', dtypes=(torch.bool,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_operator', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,))], 
'conj': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_non_standard_bool_values', dtypes=(torch.bool,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,))], 
'conj_physical': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_non_standard_bool_values', dtypes=(torch.bool,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,))], 
'diagflat': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_operator', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_autocast', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_crossref_backward_amp', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_crossref_backward_no_amp', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_non_standard_bool_values', dtypes=(torch.bool,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,))], 
'copysign': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_non_standard_bool_values', dtypes=(torch.bool,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,))], 
'count_nonzero': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_non_standard_bool_values', dtypes=(torch.bool,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,))], 
'deg2rad': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_non_standard_bool_values', dtypes=(torch.bool,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,))], 
'diag_embed': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_non_standard_bool_values', dtypes=(torch.bool,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,))], 
'diagonal_copy': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_non_standard_bool_values', dtypes=(torch.bool,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,))], 
'diagonal': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_non_standard_bool_values', dtypes=(torch.bool,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_operator', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,))], 
'diagonal_scatter': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_non_standard_bool_values', dtypes=(torch.bool,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_pointwise_ops', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake', dtypes=(torch.float32,))], 
'diff': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_non_standard_bool_values', dtypes=(torch.bool,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_operator', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,))], 
'digamma': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_non_standard_bool_values', dtypes=(torch.bool,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_pointwise_ops', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_forward_ad', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_operator', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_autocast', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_crossref_backward_amp', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_crossref_backward_no_amp', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake', dtypes=(torch.float32,))], 
'dsplit': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_non_standard_bool_values', dtypes=(torch.bool,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_operator', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,))], 
'erf': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_non_standard_bool_values', dtypes=(torch.bool,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,))], 
'erfc': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_non_standard_bool_values', dtypes=(torch.bool,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,))], 
'dstack': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_non_standard_bool_values', dtypes=(torch.bool,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_operator', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,))], 
'erfinv': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_non_standard_bool_values', dtypes=(torch.bool,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,))], 
'exp2': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_non_standard_bool_values', dtypes=(torch.bool,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,))], 
'exp': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_non_standard_bool_values', dtypes=(torch.bool,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,))], 
'expm1': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_non_standard_bool_values', dtypes=(torch.bool,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,))], 
'fft.fftshift': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_non_standard_bool_values', dtypes=(torch.bool,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,))], 
'eq': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_non_standard_bool_values', dtypes=(torch.bool,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,))], 
'equal': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_non_standard_bool_values', dtypes=(torch.bool,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,))], 
'fft.hfft2': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_autocast', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_crossref_backward_amp', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_crossref_backward_no_amp', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_forward_ad', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_non_standard_bool_values', dtypes=(torch.bool,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_operator', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_pointwise_ops', dtypes=(torch.float32,))], 
'fft.hfft': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_autocast', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_crossref_backward_amp', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_crossref_backward_no_amp', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_forward_ad', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_non_standard_bool_values', dtypes=(torch.bool,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_operator', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,))], 
'fft.hfftn': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_autocast', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_crossref_backward_amp', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_crossref_backward_no_amp', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_forward_ad', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_non_standard_bool_values', dtypes=(torch.bool,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_operator', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,))], 
'expand_as': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_non_standard_bool_values', dtypes=(torch.bool,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_operator', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,))], 
'fft.ifftshift': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_non_standard_bool_values', dtypes=(torch.bool,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,))], 
'expand': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_non_standard_bool_values', dtypes=(torch.bool,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_operator', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,))], 
'fft.fft2': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_crossref_backward_amp', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_crossref_backward_no_amp', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_forward_ad', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_non_standard_bool_values', dtypes=(torch.bool,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_operator', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,))], 
'fft.fft': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_crossref_backward_amp', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_crossref_backward_no_amp', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_forward_ad', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_non_standard_bool_values', dtypes=(torch.bool,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_operator', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,))], 
'fft.fftn': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_crossref_backward_amp', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_crossref_backward_no_amp', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_forward_ad', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_non_standard_bool_values', dtypes=(torch.bool,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_operator', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,))], 
'fft.ifft2': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_crossref_backward_amp', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_crossref_backward_no_amp', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_forward_ad', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_non_standard_bool_values', dtypes=(torch.bool,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_operator', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,))], 
'fft.ifft': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_crossref_backward_amp', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_crossref_backward_no_amp', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_forward_ad', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_non_standard_bool_values', dtypes=(torch.bool,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_operator', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,))], 
'fft.ifftn': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_crossref_backward_amp', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_crossref_backward_no_amp', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_forward_ad', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_non_standard_bool_values', dtypes=(torch.bool,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_operator', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,))], 
'fft.ihfft2': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_forward_ad', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_non_standard_bool_values', dtypes=(torch.bool,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_operator', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,))], 
'fft.ihfft': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_crossref_backward_amp', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_crossref_backward_no_amp', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_forward_ad', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_non_standard_bool_values', dtypes=(torch.bool,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_operator', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,))], 
'fft.ihfftn': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_forward_ad', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_non_standard_bool_values', dtypes=(torch.bool,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_operator', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,))], 
'fft.irfft2': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_crossref_backward_amp', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_crossref_backward_no_amp', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_non_standard_bool_values', dtypes=(torch.bool,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_operator', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,))], 
'fft.irfft': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_crossref_backward_amp', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_crossref_backward_no_amp', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_non_standard_bool_values', dtypes=(torch.bool,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_operator', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_autocast', dtypes=(torch.float32,))], 
'fft.irfftn': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_crossref_backward_amp', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_crossref_backward_no_amp', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_non_standard_bool_values', dtypes=(torch.bool,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_operator', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_autocast', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_pointwise_ops', dtypes=(torch.float32,))], 
'fft.rfft2': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_crossref_backward_amp', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_crossref_backward_no_amp', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_forward_ad', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_non_standard_bool_values', dtypes=(torch.bool,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_operator', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,))], 
'fft.rfft': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_crossref_backward_amp', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_crossref_backward_no_amp', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_forward_ad', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_non_standard_bool_values', dtypes=(torch.bool,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_operator', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,))], 
'fft.rfftn': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_crossref_backward_amp', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_crossref_backward_no_amp', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_forward_ad', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_non_standard_bool_values', dtypes=(torch.bool,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_operator', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake', dtypes=(torch.float32,))], 
'fill': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_non_standard_bool_values', dtypes=(torch.bool,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,))], 
'full': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_autocast', dtypes=(torch.float32,))], 
'flatten': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_non_standard_bool_values', dtypes=(torch.bool,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,))], 
'flip': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_non_standard_bool_values', dtypes=(torch.bool,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,))], 
'fliplr': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_non_standard_bool_values', dtypes=(torch.bool,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,))], 
'flipud': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_non_standard_bool_values', dtypes=(torch.bool,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,))], 
'float': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_autocast', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_crossref_backward_amp', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_crossref_backward_no_amp', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_non_standard_bool_values', dtypes=(torch.bool,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,))], 
'float_power': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_autocast', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_crossref_backward_amp', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_crossref_backward_no_amp', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_non_standard_bool_values', dtypes=(torch.bool,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,))], 
'fmax': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_non_standard_bool_values', dtypes=(torch.bool,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,))], 
'fmin': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_non_standard_bool_values', dtypes=(torch.bool,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,))], 
'full_like': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_autocast', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_non_standard_bool_values', dtypes=(torch.bool,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,))], 
'gather': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_crossref_backward_amp', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_crossref_backward_no_amp', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_non_standard_bool_values', dtypes=(torch.bool,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,))], 
'ge': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_non_standard_bool_values', dtypes=(torch.bool,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,))], 
'gt': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_non_standard_bool_values', dtypes=(torch.bool,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,))], 
'heaviside': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_non_standard_bool_values', dtypes=(torch.bool,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,))], 
'hsplit': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_non_standard_bool_values', dtypes=(torch.bool,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_operator', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,))], 
'hstack': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_non_standard_bool_values', dtypes=(torch.bool,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,))], 
'i0': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_non_standard_bool_values', dtypes=(torch.bool,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_operator', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,))], 
'index_copy': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_crossref_backward_amp', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_crossref_backward_no_amp', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_non_standard_bool_values', dtypes=(torch.bool,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,))], 
'index_put': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_non_standard_bool_values', dtypes=(torch.bool,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,))], 
'index_select': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_crossref_backward_amp', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_crossref_backward_no_amp', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_non_standard_bool_values', dtypes=(torch.bool,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,))], 
'int': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_non_standard_bool_values', dtypes=(torch.bool,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,))], 
'isclose': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_autocast', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_non_standard_bool_values', dtypes=(torch.bool,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_operator', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.complex64,))], 
'isfinite': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_non_standard_bool_values', dtypes=(torch.bool,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,))], 
'isinf': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_non_standard_bool_values', dtypes=(torch.bool,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,))], 
'isnan': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_non_standard_bool_values', dtypes=(torch.bool,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,))], 
'isneginf': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_non_standard_bool_values', dtypes=(torch.bool,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,))], 
'isposinf': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_non_standard_bool_values', dtypes=(torch.bool,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,))], 
'isreal': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_non_standard_bool_values', dtypes=(torch.bool,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,))], 
'le': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_non_standard_bool_values', dtypes=(torch.bool,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,))], 
'item': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_non_standard_bool_values', dtypes=(torch.bool,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,))], 
'log1p': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_non_standard_bool_values', dtypes=(torch.bool,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,))], 
'kron': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_non_standard_bool_values', dtypes=(torch.bool,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,))], 
'lgamma': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_forward_ad', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_non_standard_bool_values', dtypes=(torch.bool,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_operator', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_pointwise_ops', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_autocast', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_crossref_backward_amp', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_crossref_backward_no_amp', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake', dtypes=(torch.float32,))], 
'linalg.diagonal': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_non_standard_bool_values', dtypes=(torch.bool,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_operator', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,))], 
'log10': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_non_standard_bool_values', dtypes=(torch.bool,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,))], 
'log2': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_non_standard_bool_values', dtypes=(torch.bool,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,))], 
'log': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_non_standard_bool_values', dtypes=(torch.bool,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,))], 
'logical_and': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_non_standard_bool_values', dtypes=(torch.bool,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,))], 
'logical_not': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_non_standard_bool_values', dtypes=(torch.bool,))], 
'logical_or': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_autocast', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_non_standard_bool_values', dtypes=(torch.bool,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_operator', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,))], 
'logical_xor': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_non_standard_bool_values', dtypes=(torch.bool,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,))], 
'logit': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_non_standard_bool_values', dtypes=(torch.bool,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,))], 
'long': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_non_standard_bool_values', dtypes=(torch.bool,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,))], 
'lt': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_non_standard_bool_values', dtypes=(torch.bool,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,))], 
'mH': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_non_standard_bool_values', dtypes=(torch.bool,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_operator', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,))], 
'max': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_non_standard_bool_values', dtypes=(torch.bool,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,))], 
'mT': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_non_standard_bool_values', dtypes=(torch.bool,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_operator', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,))], 
'masked_fill': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_non_standard_bool_values', dtypes=(torch.bool,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,))], 
'masked.mean': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_non_standard_bool_values', dtypes=(torch.bool,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_operator', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,))], 
'maximum': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_non_standard_bool_values', dtypes=(torch.bool,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,))], 
'masked.prod': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_forward_ad', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_non_standard_bool_values', dtypes=(torch.bool,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_operator', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,))], 
'masked_scatter': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_non_standard_bool_values', dtypes=(torch.bool,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_crossref_backward_amp', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_crossref_backward_no_amp', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_pointwise_ops', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,))], 
'masked_select': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_non_standard_bool_values', dtypes=(torch.bool,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,))], 
'min': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_non_standard_bool_values', dtypes=(torch.bool,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,))], 
'masked.sum': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_non_standard_bool_values', dtypes=(torch.bool,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_operator', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,))], 
'minimum': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_non_standard_bool_values', dtypes=(torch.bool,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,))], 
'msort': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_non_standard_bool_values', dtypes=(torch.bool,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,))], 
'meshgrid': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_non_standard_bool_values', dtypes=(torch.bool,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_operator', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,))], 
'mode': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_crossref_backward_amp', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_crossref_backward_no_amp', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_non_standard_bool_values', dtypes=(torch.bool,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,))], 
'movedim': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_non_standard_bool_values', dtypes=(torch.bool,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_operator', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,))], 
'nan_to_num': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_autocast', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_crossref_backward_amp', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_crossref_backward_no_amp', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_forward_ad', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_non_standard_bool_values', dtypes=(torch.bool,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_operator', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,))], 
'nansum': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_crossref_backward_amp', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_crossref_backward_no_amp', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_forward_ad', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_non_standard_bool_values', dtypes=(torch.bool,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_operator', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,))], 
'narrow_copy': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_non_standard_bool_values', dtypes=(torch.bool,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,))], 
'nn.functional.cosine_embedding_loss': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_non_standard_bool_values', dtypes=(torch.bool,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,))], 
'narrow': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_non_standard_bool_values', dtypes=(torch.bool,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,))], 
'ne': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_non_standard_bool_values', dtypes=(torch.bool,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,))], 
'new_full': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_autocast', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_non_standard_bool_values', dtypes=(torch.bool,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,))], 
'new_zeros': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_autocast', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_non_standard_bool_values', dtypes=(torch.bool,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,))], 
'new_ones': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_non_standard_bool_values', dtypes=(torch.bool,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_autocast', dtypes=(torch.float32,))], 
'nn.functional.feature_alpha_dropout': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_non_standard_bool_values', dtypes=(torch.bool,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,))], 
'nn.functional.pixel_shuffle': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_non_standard_bool_values', dtypes=(torch.bool,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,))], 
'nn.functional.pixel_unshuffle': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_non_standard_bool_values', dtypes=(torch.bool,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,))], 
'outer': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_non_standard_bool_values', dtypes=(torch.bool,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,))], 
'permute': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_non_standard_bool_values', dtypes=(torch.bool,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_operator', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,))], 
'polygamma': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_autocast', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_crossref_backward_amp', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_crossref_backward_no_amp', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_forward_ad', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_non_standard_bool_values', dtypes=(torch.bool,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_operator', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_pointwise_ops', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,))], 
'prod': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_non_standard_bool_values', dtypes=(torch.bool,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,))], 
'rad2deg': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_non_standard_bool_values', dtypes=(torch.bool,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,))], 
'ravel': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_crossref_backward_amp', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_crossref_backward_no_amp', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_forward_ad', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_non_standard_bool_values', dtypes=(torch.bool,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,))], 
'real': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_autocast', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_crossref_backward_amp', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_crossref_backward_no_amp', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_forward_ad', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_non_standard_bool_values', dtypes=(torch.bool,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_operator', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,))], 
'reciprocal': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_non_standard_bool_values', dtypes=(torch.bool,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,))], 
'repeat_interleave': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_crossref_backward_amp', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_crossref_backward_no_amp', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_non_standard_bool_values', dtypes=(torch.bool,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,))], 
'roll': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_non_standard_bool_values', dtypes=(torch.bool,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,))], 
'repeat': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_non_standard_bool_values', dtypes=(torch.bool,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,))], 
'rsqrt': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_non_standard_bool_values', dtypes=(torch.bool,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,))], 
'reshape': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_non_standard_bool_values', dtypes=(torch.bool,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,))], 
'reshape_as': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_non_standard_bool_values', dtypes=(torch.bool,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,))], 
'resize_': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_non_standard_bool_values', dtypes=(torch.bool,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,))], 
'resize_as_': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_non_standard_bool_values', dtypes=(torch.bool,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,))], 
'resolve_conj': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_non_standard_bool_values', dtypes=(torch.bool,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,))], 
'resolve_neg': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_non_standard_bool_values', dtypes=(torch.bool,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,))], 
'rot90': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_non_standard_bool_values', dtypes=(torch.bool,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,))], 
'sgn': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_forward_ad', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_non_standard_bool_values', dtypes=(torch.bool,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,))], 
'scatter_reduce': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_crossref_backward_amp', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_crossref_backward_no_amp', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_non_standard_bool_values', dtypes=(torch.bool,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_pointwise_ops', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_autocast', dtypes=(torch.float32,))], 
'sigmoid': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_non_standard_bool_values', dtypes=(torch.bool,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,))], 
'sign': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_non_standard_bool_values', dtypes=(torch.bool,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,))], 
'signbit': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_autocast', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_non_standard_bool_values', dtypes=(torch.bool,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_operator', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,))], 
'sin': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_non_standard_bool_values', dtypes=(torch.bool,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,))], 
'sinh': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_non_standard_bool_values', dtypes=(torch.bool,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,))], 
'select_scatter': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_non_standard_bool_values', dtypes=(torch.bool,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_pointwise_ops', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_autocast', dtypes=(torch.float32,))], 
'select': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_non_standard_bool_values', dtypes=(torch.bool,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_operator', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,))], 
'short': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_non_standard_bool_values', dtypes=(torch.bool,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,))], 
'sinc': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_non_standard_bool_values', dtypes=(torch.bool,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,))], 
'slice_scatter': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_non_standard_bool_values', dtypes=(torch.bool,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_pointwise_ops', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_autocast', dtypes=(torch.float32,))], 
'slice': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_non_standard_bool_values', dtypes=(torch.bool,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_operator', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,))], 
'special.airy_ai': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_non_standard_bool_values', dtypes=(torch.bool,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,))], 
'special.bessel_j0': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_non_standard_bool_values', dtypes=(torch.bool,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,))], 
'special.bessel_j1': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_non_standard_bool_values', dtypes=(torch.bool,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,))], 
'special.bessel_y0': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_non_standard_bool_values', dtypes=(torch.bool,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,))], 
'special.bessel_y1': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_non_standard_bool_values', dtypes=(torch.bool,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,))], 
'special.chebyshev_polynomial_t': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_non_standard_bool_values', dtypes=(torch.bool,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,))], 
'special.chebyshev_polynomial_u': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_non_standard_bool_values', dtypes=(torch.bool,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,))], 
'special.entr': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_forward_ad', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_non_standard_bool_values', dtypes=(torch.bool,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_operator', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,))], 
'special.erfcx': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_non_standard_bool_values', dtypes=(torch.bool,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,))], 
'special.hermite_polynomial_he': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_non_standard_bool_values', dtypes=(torch.bool,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,))], 
'special.i1': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_non_standard_bool_values', dtypes=(torch.bool,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_operator', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,))], 
'special.i0e': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_non_standard_bool_values', dtypes=(torch.bool,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,))], 
'special.ndtr': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_non_standard_bool_values', dtypes=(torch.bool,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,))], 
'special.i1e': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_non_standard_bool_values', dtypes=(torch.bool,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,))], 
'special.laguerre_polynomial_l': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_non_standard_bool_values', dtypes=(torch.bool,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,))], 
'special.modified_bessel_i0': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_non_standard_bool_values', dtypes=(torch.bool,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,))], 
'special.log_ndtr': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_non_standard_bool_values', dtypes=(torch.bool,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,))], 
'special.modified_bessel_k0': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_non_standard_bool_values', dtypes=(torch.bool,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,))], 
'special.modified_bessel_i1': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_non_standard_bool_values', dtypes=(torch.bool,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,))], 
'special.modified_bessel_k1': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_non_standard_bool_values', dtypes=(torch.bool,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,))], 
'special.ndtri': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_non_standard_bool_values', dtypes=(torch.bool,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,))], 
'special.polygamma': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_autocast', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_crossref_backward_amp', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_crossref_backward_no_amp', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_forward_ad', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_non_standard_bool_values', dtypes=(torch.bool,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_operator', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_pointwise_ops', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,))], 
'special.scaled_modified_bessel_k0': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_non_standard_bool_values', dtypes=(torch.bool,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,))], 
'special.scaled_modified_bessel_k1': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_non_standard_bool_values', dtypes=(torch.bool,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,))], 
'special.spherical_bessel_j0': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_non_standard_bool_values', dtypes=(torch.bool,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,))], 
'sqrt': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_non_standard_bool_values', dtypes=(torch.bool,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,))], 
'special.xlog1py': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_non_standard_bool_values', dtypes=(torch.bool,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,))], 
'split': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_non_standard_bool_values', dtypes=(torch.bool,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_operator', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,))], 
'split_with_sizes': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_non_standard_bool_values', dtypes=(torch.bool,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_operator', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,))], 
'split_with_sizes_copy': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_non_standard_bool_values', dtypes=(torch.bool,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,))], 
'squeeze': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_non_standard_bool_values', dtypes=(torch.bool,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_operator', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,))], 
'square': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_non_standard_bool_values', dtypes=(torch.bool,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,))], 
'tan': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_non_standard_bool_values', dtypes=(torch.bool,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,))], 
'tanh': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_non_standard_bool_values', dtypes=(torch.bool,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,))], 
'stack': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_non_standard_bool_values', dtypes=(torch.bool,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,))], 
'sum': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_non_standard_bool_values', dtypes=(torch.bool,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,))], 
'sum_to_size': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_non_standard_bool_values', dtypes=(torch.bool,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,))], 
't': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_non_standard_bool_values', dtypes=(torch.bool,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_operator', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,))], 
'take_along_dim': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_non_standard_bool_values', dtypes=(torch.bool,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_operator', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,))], 
'tensor_split': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_non_standard_bool_values', dtypes=(torch.bool,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,))], 
'tile': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_non_standard_bool_values', dtypes=(torch.bool,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,))], 
'transpose': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_non_standard_bool_values', dtypes=(torch.bool,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_operator', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,))], 
'tril': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_non_standard_bool_values', dtypes=(torch.bool,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,))], 
'triu': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_non_standard_bool_values', dtypes=(torch.bool,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,))], 
'true_divide': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_crossref_backward_amp', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_crossref_backward_no_amp', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_non_standard_bool_values', dtypes=(torch.bool,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,))], 
'unbind': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_non_standard_bool_values', dtypes=(torch.bool,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_operator', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,))], 
'unflatten': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_non_standard_bool_values', dtypes=(torch.bool,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,))], 
'unfold_copy': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_non_standard_bool_values', dtypes=(torch.bool,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,))], 
'unfold': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_non_standard_bool_values', dtypes=(torch.bool,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_operator', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,))], 
'unique': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_non_standard_bool_values', dtypes=(torch.bool,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_operator', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,))], 
'unsafe_chunk': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_non_standard_bool_values', dtypes=(torch.bool,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,))], 
'unsafe_split': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_non_standard_bool_values', dtypes=(torch.bool,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,))], 
'unsqueeze': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_non_standard_bool_values', dtypes=(torch.bool,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_operator', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,))], 
'view_as': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_non_standard_bool_values', dtypes=(torch.bool,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,))], 
'view_copy': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_non_standard_bool_values', dtypes=(torch.bool,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,))], 
'view': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_non_standard_bool_values', dtypes=(torch.bool,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,))], 
'vsplit': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_non_standard_bool_values', dtypes=(torch.bool,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_operator', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,))], 
'vstack': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_non_standard_bool_values', dtypes=(torch.bool,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_operator', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,))], 
'where': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_non_standard_bool_values', dtypes=(torch.bool,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,))], 
'zero_': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_non_standard_bool_values', dtypes=(torch.bool,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,))], 
'zeros': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_autocast', dtypes=(torch.float32,))], 
'zeros_like': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_autocast', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_non_standard_bool_values', dtypes=(torch.bool,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,))], 
'_native_batch_norm_legit': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_compare_cpu', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_autocast', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_crossref_backward_amp', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_crossref_backward_no_amp', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,))], 
'_refs.addr': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,))], 
'_refs.arange': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,))], 
'_refs.clamp_max': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,))], 
'_refs.cat': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,))], 
'_refs.clamp_min': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,))], 
'_refs.count_nonzero': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,))], 
'_refs.fft.hfft2': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,))], 
'_refs.fft.hfft': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,))], 
'_refs.fft.ifft': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,))], 
'_refs.fft.fft2': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,))], 
'_refs.fft.fft': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,))], 
'_refs.fft.fftn': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,))], 
'_refs.fft.ihfft': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,))], 
'_refs.fft.hfftn': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,))], 
'_refs.fft.ifft2': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,))], 
'_refs.fft.ifftn': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,))], 
'_refs.fft.ihfft2': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,))], 
'_refs.fft.ihfftn': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,))], 
'_refs.fft.irfftn': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,))], 
'_refs.fft.rfft2': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,))], 
'_refs.fft.rfft': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,))], 
'_refs.fft.rfftn': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,))], 
'_refs.floor_divide': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,))], 
'_refs.i0': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,))], 
'_refs.signbit': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,))], 
'_refs.special.entr': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,))], 
'_refs.special.i1': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,))], 
'addbmm': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_pointwise_ops', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_crossref_backward_amp', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_crossref_backward_no_amp', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_forward_ad', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_operator', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_autocast', dtypes=(torch.float32,))], 
'argmax': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_autocast', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_operator', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,))], 
'argmin': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,))], 
'bitwise_left_shift': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.int64,))], 
'bitwise_right_shift': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.int64,))], 
'bucketize': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,))], 
'cholesky': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_crossref_backward_amp', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_crossref_backward_no_amp', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,))], 
'complex': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_crossref_backward_amp', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_crossref_backward_no_amp', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_forward_ad', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_operator', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,))], 
'frexp': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_crossref_backward_amp', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_crossref_backward_no_amp', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_forward_ad', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,))], 
'gcd': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.int64,))], 
'histogram': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_operator', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_autocast', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_pointwise_ops', dtypes=(torch.float32,))], 
'hypot': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,))], 
'igamma': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_pointwise_ops', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_operator', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_autocast', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake', dtypes=(torch.float32,))], 
'igammac': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_pointwise_ops', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_operator', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_autocast', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake', dtypes=(torch.float32,))], 
'index_reduce': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_crossref_backward_amp', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_crossref_backward_no_amp', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,))], 
'isin': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,))], 
'lcm': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.int64,))], 
'linalg.cholesky_ex': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_crossref_backward_amp', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_crossref_backward_no_amp', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_forward_ad', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,))], 
'linalg.cross': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_forward_ad', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_operator', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,))], 
'linalg.det': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_compare_cpu', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_forward_ad', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_operator', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_autocast', dtypes=(torch.float32,))], 
'linalg.eigh': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,))], 
'linalg.eigvals': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_crossref_backward_amp', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_crossref_backward_no_amp', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_forward_ad', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_operator', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.complex64,))], 
'linalg.eigvalsh': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,))], 
'linalg.householder_product': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,))], 
'linalg.inv_ex': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,))], 
'linalg.ldl_factor_ex': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,))], 
'linalg.ldl_solve': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,))], 
'linalg.matrix_norm': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,))], 
'linalg.norm': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_compare_cpu', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_crossref_backward_amp', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_crossref_backward_no_amp', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,))], 
'linalg.norm.subgradients_at_zero': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_compare_cpu', dtypes=(torch.float32,))], 
'linalg.slogdet': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_forward_ad', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_compare_cpu', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_operator', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_autocast', dtypes=(torch.float32,))], 
'linalg.solve_ex': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,))], 
'linalg.svdvals': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,))], 
'linalg.vecdot': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,))], 
'linalg.vector_norm': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,))], 
'logcumsumexp': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,))], 
'mvlgamma': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_crossref_backward_amp', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_crossref_backward_no_amp', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_forward_ad', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_operator', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,))], 
'nanmean': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_crossref_backward_amp', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_crossref_backward_no_amp', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_forward_ad', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_operator', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,))], 
'native_batch_norm': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_compare_cpu', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_crossref_backward_amp', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_crossref_backward_no_amp', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,))], 
'nextafter': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,))], 
'nn.functional.silu': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_autocast', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,))], 
'norm': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_crossref_backward_amp', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_crossref_backward_no_amp', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,))], 
'normal': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_crossref_backward_amp', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_crossref_backward_no_amp', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,))], 
'searchsorted': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_autocast', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_operator', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,))], 
'None': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_pointwise_tag_coverage')], 
'__rsub__': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,))], 
'abs': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view'), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,))], 
'acos': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_non_standard_bool_values', dtypes=(torch.bool,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,))], 
'allclose': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,))], 
'cdist': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_crossref_backward_amp', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_crossref_backward_no_amp', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,))], 
'corrcoef': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_crossref_backward_amp', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_crossref_backward_no_amp', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_operator', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,))], 
'cov': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_crossref_backward_amp', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_crossref_backward_no_amp', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_operator', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,))], 
'cumprod': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,))], 
'cumsum': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,))], 
'cumulative_trapezoid': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_operator', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,))], 
'dot': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,))], 
'gradient': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_operator', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,))], 
'geqrf': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_autocast', dtypes=(torch.float32,))], 
'lerp': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,))], 
'linalg.cond': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_operator', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,))], 
'linalg.qr': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_crossref_backward_amp', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_crossref_backward_no_amp', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_forward_ad', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,))], 
'linalg.tensorsolve': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_operator', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,))], 
'linalg.tensorinv': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,))], 
'linalg.vander': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_operator', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,))], 
'logdet': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_forward_ad', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_compare_cpu', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_autocast', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_operator', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_pointwise_ops', dtypes=(torch.float32,))], 
'lu': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_crossref_backward_amp', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_crossref_backward_no_amp', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_forward_ad', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,))], 
'masked.argmax': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_autocast', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_operator', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,))], 
'masked.cumprod': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_forward_ad', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_operator', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,))], 
'masked.cumsum': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_forward_ad', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_operator', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,))], 
'masked.normalize': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,))], 
'masked.median': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_crossref_backward_amp', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_crossref_backward_no_amp', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_operator', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,))], 
'masked.std': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_forward_ad', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_operator', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,))], 
'masked.var': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_forward_ad', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_operator', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,))], 
'matrix_exp': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,))], 
'mean': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,))], 
'native_layer_norm': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_autocast', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_crossref_backward_amp', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_crossref_backward_no_amp', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_operator', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,))], 
'neg': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,))], 
'nn.functional.binary_cross_entropy_with_logits': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_crossref_backward_amp', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_crossref_backward_no_amp', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,))], 
'nn.functional.conv_transpose2d': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_autocast', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_crossref_backward_amp', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_crossref_backward_no_amp', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_forward_ad', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,))], 
'nn.functional.conv_transpose3d': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_autocast', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_crossref_backward_amp', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_crossref_backward_no_amp', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_forward_ad', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_operator', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,))], 
'nn.functional.conv_transpose1d': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_crossref_backward_amp', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_operator', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,))], 
'nn.functional.dropout': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_autocast', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_crossref_backward_amp', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_crossref_backward_no_amp', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_forward_ad', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,))], 
'nn.functional.l1_loss': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_crossref_backward_amp', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_crossref_backward_no_amp', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,))], 
'nn.functional.layer_norm': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_autocast', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_crossref_backward_amp', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_crossref_backward_no_amp', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_forward_ad', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_operator', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,))], 
'nn.functional.normalize': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_operator', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,))], 
'nn.functional.pdist': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_autocast', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_crossref_backward_amp', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_crossref_backward_no_amp', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_operator', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,))], 
'nn.functional.prelu': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_crossref_backward_amp', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_crossref_backward_no_amp', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,))], 
'nn.functional.pairwise_distance': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,))], 
'nn.functional.softsign': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,))], 
'nn.functional.smooth_l1_loss': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_crossref_backward_amp', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_crossref_backward_no_amp', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,))], 
'nn.functional.tanhshrink': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,))], 
'nn.functional.triplet_margin_loss': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,))], 
'nn.functional.triplet_margin_with_distance_loss': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,))], 
'nonzero': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_operator', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,))], 
'ormqr': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,))], 
'positive': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,))], 
'pow': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,))], 
'rand_like': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_autocast', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,))], 
'randn_like': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_autocast', dtypes=(torch.float32,))], 
'qr': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_crossref_backward_amp', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_crossref_backward_no_amp', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_forward_ad', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,))], 
'rsub': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,))], 
'std': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,))], 
'stft': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_compare_cpu', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_crossref_backward_amp', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_crossref_backward_no_amp', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_forward_ad', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_operator', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.complex64,))], 
'sub': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,))], 
'trace': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,))], 
'trapezoid': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_operator', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,))], 
'trapz': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_operator', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,))], 
'triangular_solve': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,))], 
'uniform': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,))], 
'vdot': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,))], 
'view_as_complex': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_autocast', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_crossref_backward_amp', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_crossref_backward_no_amp', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_forward_ad', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_operator', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,))], 
'var': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,))], 
'masked.amax': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_forward_ad', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_operator', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,))], 
'masked.amin': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_forward_ad', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_operator', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,))], 
'masked.log_softmax': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_crossref_backward_amp', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_crossref_backward_no_amp', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_forward_ad', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_operator', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_autocast', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_pointwise_ops', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake', dtypes=(torch.float32,))], 
'masked.logaddexp': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_forward_ad', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_operator', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,))], 
'masked.softmax': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_crossref_backward_amp', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_crossref_backward_no_amp', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_operator', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_autocast', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_pointwise_ops', dtypes=(torch.float32,))], 
'masked.softmin': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_crossref_backward_amp', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_crossref_backward_no_amp', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_operator', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,))], 
'nanmedian': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_crossref_backward_amp', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_crossref_backward_no_amp', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,))], 
'nanquantile': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_forward_ad', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_operator', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,))], 
'nn.functional.batch_norm': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_crossref_backward_amp', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_crossref_backward_no_amp', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_forward_ad', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,))], 
'nn.functional.dropout3d': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_operator', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,))], 
'nn.functional.cosine_similarity': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_operator', dtypes=(torch.float32,))], 
'nn.functional.cross_entropy': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_crossref_backward_amp', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_crossref_backward_no_amp', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_forward_ad', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,))], 
'nn.functional.ctc_loss': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,))], 
'nn.functional.instance_norm': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_crossref_backward_amp', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_crossref_backward_no_amp', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_forward_ad', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,))], 
'nn.functional.local_response_norm': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_operator', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,))], 
'nn.functional.logsigmoid': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_crossref_backward_amp', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_crossref_backward_no_amp', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_forward_ad', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,))], 
'nn.functional.multi_head_attention_forward': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_crossref_backward_amp', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,))], 
'nn.functional.multilabel_soft_margin_loss': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_crossref_backward_amp', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_crossref_backward_no_amp', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_forward_ad', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,))], 
'nn.functional.poisson_nll_loss': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,))], 
'nn.functional.scaled_dot_product_attention': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_crossref_backward_amp', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_operator', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,))], 
'pca_lowrank': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_forward_ad', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_operator', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,))], 
'quantile': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_forward_ad', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_operator', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,))], 
'svd_lowrank': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_operator', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,))], 
'_softmax_backward_data': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_crossref_backward_amp', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_crossref_backward_no_amp', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_forward_ad', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_pointwise_ops', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,))], 
'bernoulli': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_forward_ad', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,))], 
'masked.argmin': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_operator', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,))], 
'randint_like': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_autocast', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_operator', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,))], 
'signal.windows.blackman': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_autocast', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_operator', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_pointwise_ops', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,))], 
'signal.windows.cosine': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_autocast', dtypes=(torch.float32,))], 
'signal.windows.general_hamming': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_autocast', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_operator', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_pointwise_ops', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,))], 
'signal.windows.general_cosine': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_autocast', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_operator', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_pointwise_ops', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,))], 
'signal.windows.hamming': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_autocast', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_operator', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_pointwise_ops', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,))], 
'signal.windows.hann': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_autocast', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_operator', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_pointwise_ops', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,))], 
'signal.windows.nuttall': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_operator', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_autocast', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_pointwise_ops', dtypes=(torch.float32,))], 
'_refs.T': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,))], 
'_refs._conversions.bfloat16': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,))], 
'_refs._conversions.bool': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,))], 
'_refs._conversions.byte': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,))], 
'_refs._conversions.cdouble': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,))], 
'_refs._conversions.cfloat': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,))], 
'_refs._conversions.char': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,))], 
'_refs._conversions.float': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,))], 
'_refs._conversions.int': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,))], 
'_refs._conversions.long': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,))], 
'_refs._conversions.short': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,))], 
'_refs.abs': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,))], 
'_refs.acos': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,))], 
'_refs.acosh': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,))], 
'_refs.add': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,))], 
'_refs.addcdiv': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_compare_cpu', dtypes=(torch.float32,))], 
'_refs.addcmul': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,))], 
'_refs.all': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,))], 
'_refs.allclose': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,))], 
'_refs.any': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,))], 
'_refs.as_strided': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_compare_cpu', dtypes=(torch.float32,))], 
'_refs.as_strided_scatter': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,))], 
'_refs.asin': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,))], 
'_refs.asinh': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,))], 
'_refs.atan': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,))], 
'_refs.atanh': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,))], 
'_refs.atleast_1d': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,))], 
'_refs.atleast_2d': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,))], 
'_refs.atleast_3d': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,))], 
'_refs.broadcast_tensors': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,))], 
'_refs.broadcast_to': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,))], 
'_refs.chunk': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,))], 
'_refs.clone': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,))], 
'_refs.column_stack': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,))], 
'_refs.conj': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,))], 
'_refs.conj_physical': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,))], 
'_refs.constant_pad_nd': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,))], 
'_refs.contiguous': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,))], 
'_refs.cos': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,))], 
'_refs.cosh': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,))], 
'_refs.cumprod': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,))], 
'_refs.cumsum': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,))], 
'_refs.diag_embed': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,))], 
'_refs.diag': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,))], 
'_refs.diagonal_copy': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,))], 
'_refs.diagonal': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,))], 
'_refs.diagonal_scatter': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,))], 
'_refs.dsplit': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,))], 
'_refs.dstack': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,))], 
'_refs.empty_strided': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,))], 
'_refs.eq': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,))], 
'_refs.equal': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,))], 
'_refs.exp2': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,))], 
'_refs.exp': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,))], 
'_refs.expand_as': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,))], 
'_refs.expand': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,))], 
'_refs.expm1': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,))], 
'_refs.fft.fftshift': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,))], 
'_refs.fft.ifftshift': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,))], 
'_refs.fft.irfft2': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,))], 
'_refs.fft.irfft': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,))], 
'_refs.fill': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,))], 
'_refs.flatten': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,))], 
'_refs.flip': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,))], 
'_refs.fliplr': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,))], 
'_refs.flipud': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,))], 
'_refs.float_power': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,))], 
'_refs.hsplit': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,))], 
'_refs.hstack': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,))], 
'_refs.imag': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,))], 
'_refs.index_add': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,))], 
'_refs.index_fill': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,))], 
'_refs.index_select': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,))], 
'_refs.isclose': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,))], 
'_refs.isfinite': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,))], 
'_refs.isinf': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,))], 
'_refs.isnan': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,))], 
'_refs.isreal': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,))], 
'_refs.item': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,))], 
'_refs.lerp': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,))], 
'_refs.linalg.diagonal': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,))], 
'_refs.linalg.matrix_norm': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,))], 
'_refs.linalg.svdvals': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,))], 
'_refs.linspace': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_compare_cpu', dtypes=(torch.float32,))], 
'_refs.log10': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,))], 
'_refs.log1p': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,))], 
'_refs.log2': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,))], 
'_refs.log': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,))], 
'_refs.logical_and': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,))], 
'_refs.logical_not': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,))], 
'_refs.logical_or': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,))], 
'_refs.logical_xor': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,))], 
'_refs.masked_fill': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,))], 
'_refs.mean': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,))], 
'_refs.meshgrid': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,))], 
'_refs.movedim': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,))], 
'_refs.narrow_copy': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,))], 
'_refs.narrow': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,))], 
'_refs.ne': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,))], 
'_refs.neg': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,))], 
'_refs.new_empty_strided': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,))], 
'_refs.new_full': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,))], 
'_refs.new_ones': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,))], 
'_refs.new_zeros': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,))], 
'_refs.nn.functional.l1_loss': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,))], 
'_refs.nn.functional.pairwise_distance': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,))], 
'_refs.nn.functional.tanhshrink': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,))], 
'_refs.nn.functional.triplet_margin_loss': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,))], 
'_refs.norm': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,))], 
'_refs.positive': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,))], 
'_refs.permute': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,))], 
'_refs.pow': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,))], 
'_refs.prod': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,))], 
'_refs.ravel': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,))], 
'_refs.real': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,))], 
'_refs.reciprocal': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,))], 
'_refs.renorm': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,))], 
'_refs.repeat': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,))], 
'_refs.reshape_as': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,))], 
'_refs.reshape': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,))], 
'_refs.roll': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,))], 
'_refs.rot90': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,))], 
'_refs.rsqrt': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,))], 
'_refs.rsub': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,))], 
'_refs.sgn': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,))], 
'_refs.sigmoid': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,))], 
'_refs.sin': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,))], 
'_refs.sinc': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,))], 
'_refs.sinh': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,))], 
'_refs.square': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,))], 
'_refs.sqrt': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,))], 
'_refs.squeeze': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,))], 
'_refs.stack': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,))], 
'_refs.std': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,))], 
'_refs.stft': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_compare_cpu', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,))], 
'_refs.sub': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,))], 
'_refs.sum_to_size': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,))], 
'_refs.sum': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,))], 
'_refs.t': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,))], 
'_refs.tanh': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,))], 
'_refs.tan': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,))], 
'_refs.tensor_split': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,))], 
'_refs.trace': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,))], 
'_refs.transpose': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,))], 
'_refs.tril': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,))], 
'_refs.tril_indices': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.int64,))], 
'_refs.triu': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,))], 
'_refs.triu_indices': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.int64,))], 
'_refs.unbind': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,))], 
'_refs.true_divide': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,))], 
'_refs.unflatten': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,))], 
'_refs.unfold': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,))], 
'_refs.unfold_copy': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,))], 
'_refs.unsqueeze': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,))], 
'_refs.var': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,))], 
'_refs.view_as': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,))], 
'_refs.view': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,))], 
'_refs.vsplit': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,))], 
'_refs.vstack': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,))], 
'_refs.where': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,))], 
'imag': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_autocast', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.complex64,))], 
'randn': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_autocast', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,))], 
'__rmod__': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,))], 
'_refs.amax': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,))], 
'_refs.amin': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,))], 
'_refs.bucketize': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,))], 
'_refs.cauchy': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,))], 
'_refs.ceil': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,))], 
'_refs.clamp': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,))], 
'_refs.deg2rad': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,))], 
'_refs.digamma': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,))], 
'_refs.erfc': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,))], 
'_refs.erf': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,))], 
'_refs.erfinv': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,))], 
'_refs.exponential': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,))], 
'_refs.floor': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,))], 
'_refs.fmax': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,))], 
'_refs.fmin': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,))], 
'_refs.fmod': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,))], 
'_refs.frac': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,))], 
'_refs.ge': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,))], 
'_refs.geometric': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,))], 
'_refs.gt': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,))], 
'_refs.heaviside': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,))], 
'_refs.hypot': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,))], 
'_refs.igamma': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,))], 
'_refs.igammac': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,))], 
'_refs.isneginf': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,))], 
'_refs.isposinf': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,))], 
'_refs.le': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,))], 
'_refs.lgamma': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,))], 
'_refs.log_normal': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,))], 
'_refs.logaddexp2': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,))], 
'_refs.lt': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,))], 
'_refs.maximum': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,))], 
'_refs.minimum': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,))], 
'_refs.nan_to_num': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,))], 
'_refs.nextafter': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,))], 
'_refs.nn.functional.celu': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,))], 
'_refs.nn.functional.elu': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,))], 
'_refs.nn.functional.gelu': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,))], 
'_refs.nn.functional.glu': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,))], 
'_refs.nn.functional.group_norm': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,))], 
'_refs.nn.functional.hardshrink': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,))], 
'_refs.native_layer_norm': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,))], 
'_refs.nn.functional.huber_loss': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,))], 
'_refs.nn.functional.layer_norm': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,))], 
'_refs.nn.functional.leaky_relu': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,))], 
'_refs.nn.functional.mish': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,))], 
'_refs.nn.functional.mse_loss': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,))], 
'_refs.nn.functional.pdist': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,))], 
'_refs.nn.functional.poisson_nll_loss': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,))], 
'_refs.nn.functional.prelu': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,))], 
'_refs.nn.functional.selu': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,))], 
'_refs.nn.functional.relu': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,))], 
'_refs.nn.functional.smooth_l1_loss': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,))], 
'_refs.nn.functional.softplus': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,))], 
'_refs.nn.functional.threshold': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,))], 
'_refs.normal_': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,))], 
'_refs.normal': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,))], 
'_refs.rad2deg': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,))], 
'_refs.remainder': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,))], 
'_refs.round': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,))], 
'_refs.sign': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,))], 
'_refs.special.bessel_j0': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,))], 
'_refs.special.bessel_j1': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,))], 
'_refs.special.erfcx': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,))], 
'_refs.special.i0e': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,))], 
'_refs.special.i1e': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,))], 
'_refs.special.log_ndtr': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,))], 
'_refs.special.logit': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,))], 
'_refs.special.multigammaln': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,))], 
'_refs.special.ndtr': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,))], 
'_refs.special.ndtri': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,))], 
'_refs.special.spherical_bessel_j0': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,))], 
'_refs.trunc': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,))], 
'_segment_reduce': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,))], 
'_upsample_bilinear2d_aa': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,))], 
'cauchy': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,))], 
'ceil': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,))], 
'clamp': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,))], 
'exponential': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,))], 
'floor_divide': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,))], 
'floor': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,))], 
'fmod': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,))], 
'frac': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,))], 
'geometric': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,))], 
'histogramdd': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_autocast', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_pointwise_ops', dtypes=(torch.float32,))], 
'log_normal': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,))], 
'logaddexp2': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,))], 
'multinomial': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,))], 
'nn.functional.adaptive_max_pool3d': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,))], 
'nn.functional.celu': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,))], 
'nn.functional.dropout2d': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,))], 
'nn.functional.elu': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,))], 
'nn.functional.embedding': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_autocast', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,))], 
'nn.functional.gelu': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,))], 
'nn.functional.glu': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,))], 
'nn.functional.group_norm': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,))], 
'nn.functional.hardsigmoid': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,))], 
'nn.functional.hardswish': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,))], 
'nn.functional.huber_loss': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,))], 
'nn.functional.leaky_relu': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,))], 
'nn.functional.mish': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,))], 
'nn.functional.mse_loss': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,))], 
'nn.functional.multi_margin_loss': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_compare_cpu', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,))], 
'nn.functional.relu': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,))], 
'nn.functional.rrelu': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,))], 
'nn.functional.selu': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,))], 
'nn.functional.soft_margin_loss': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_compare_cpu', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,))], 
'nn.functional.softplus': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,))], 
'nn.functional.threshold': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,))], 
'nn.functional.upsample_bilinear': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,))], 
'remainder': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,))], 
'round': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,))], 
'trunc': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,))], 
'arange': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_autocast', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,))], 
'empty_like': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_autocast', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,))], 
'empty': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_autocast', dtypes=(torch.float32,))], 
'empty_permuted': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_autocast', dtypes=(torch.float32,))], 
'eye': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_autocast', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_compare_cpu', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_non_standard_bool_values', dtypes=(torch.bool,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_operator', dtypes=(torch.float32,))], 
'logspace': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_autocast', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,))], 
'new_empty': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_autocast', dtypes=(torch.float32,))], 
'new_empty_strided': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_autocast', dtypes=(torch.float32,))], 
'ones': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_autocast', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,))], 
'scalar_tensor': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_autocast', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,))], 
'signal.windows.bartlett': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_autocast', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,))], 
'signal.windows.exponential': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_autocast', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,))], 
'signal.windows.gaussian': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_autocast', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,))], 
'signal.windows.kaiser': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_autocast', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_pointwise_ops', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.float32,))], 
'tril_indices': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake', dtypes=(torch.int64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_autocast', dtypes=(torch.int64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.int64,))], 
'triu_indices': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake', dtypes=(torch.int64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_autocast', dtypes=(torch.int64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.int64,))], 
'view_as_real': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_autocast', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.complex64,))], 
'unravel_index': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_out', dtypes=(torch.int64,))], 
'nn_functional_cosine_similarity': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_operator', dtypes=(torch.float32,))], 
'_refs_block_diag': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,))], 
'_refs_dot': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,))], 
'_refs_linalg_cross': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,))], 
'log_softmax_with_dtype': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_pointwise_ops', dtypes=(torch.float32,))], 
'softmax_with_dtype': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_autocast', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_pointwise_ops', dtypes=(torch.float32,))], 
'max_reduction_with_dim': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_crossref_backward_amp', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_crossref_backward_no_amp', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_pointwise_ops', dtypes=(torch.float32,))], 
'maximun': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_crossref_backward_amp', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_crossref_backward_no_amp', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_pointwise_ops', dtypes=(torch.float32,))], 
'nn_functional_adaptive_max_pool1d': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_pointwise_ops', dtypes=(torch.float32,))], 
'nn_functional_adaptive_max_pool2d': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_pointwise_ops', dtypes=(torch.float32,))], 
'nn_functional_adaptive_max_pool3d': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_crossref_backward_amp', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_crossref_backward_no_amp', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_pointwise_ops', dtypes=(torch.float32,))], 
'nn_functional_fractional_max_pool2d': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_crossref_backward_amp', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_crossref_backward_no_amp', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_pointwise_ops', dtypes=(torch.float32,))], 
'nn_functional_fractional_max_pool3d': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_crossref_backward_amp', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_crossref_backward_no_amp', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_pointwise_ops', dtypes=(torch.float32,))], 
'max_binary': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_crossref_backward_no_amp', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_pointwise_ops', dtypes=(torch.float32,))], 
'max_reduction_no_dim': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_crossref_backward_no_amp', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_pointwise_ops', dtypes=(torch.float32,))], 
'_refs.block_diag': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,))], 
'_refs.dot': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,))], 
'_refs.frexp': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,))], 
'_refs.linalg.cross': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,))], 
'_refs.linalg.vecdot': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,))], 
'_refs.nn.functional.pixel_shuffle': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,))], 
'_refs.nn.functional.pixel_unshuffle': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,))], 
'_refs.take_along_dim': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,))], 
'_refs.vdot': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,))], 
'_refs_linspace_tensor_overload': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,))], 
'_refs_logspace_tensor_overload': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,))], 
'_segment_reduce_lengths': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,))], 
'_segment_reduce_offsets': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,))], 
'div_floor_rounding': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,))], 
'div_no_rounding_mode': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,))], 
'div_trunc_rounding': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,))], 
'empty_strided': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_autocast', dtypes=(torch.float32,))], 
'linspace_tensor_overload': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_autocast', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,))], 
'logspace_tensor_overload': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,))], 
'nn_functional_feature_alpha_dropout_with_train': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,))], 
'nn_functional_feature_alpha_dropout_without_train': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,))], 
'normal_number_mean': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake', dtypes=(torch.float32,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestFakeTensor', 'test_fake_autocast', dtypes=(torch.float32,))], 
'round_decimals_0': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,))], 
'round_decimals_3': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,))], 
'round_decimals_neg_3': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCompositeCompliance', 'test_backward', dtypes=(torch.float32,))], 
'_refs.select_scatter': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,))], 
'nn.functional.channel_shuffle': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_variant_consistency_eager', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestCommon', 'test_non_standard_bool_values', dtypes=(torch.bool,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,))], 
'_refs.nn.functional.channel_shuffle': [
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_view', dtypes=(torch.float64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_conj_view', dtypes=(torch.complex64,)), 
DecorateInfo(unittest.skip("npu test skipped!"), 'TestMathBits', 'test_neg_conj_view', dtypes=(torch.complex128,))]}


def update_skip_list():
    for item in op_db:
        op_name = item.name
        if op_name in skip_list:
            if isinstance(item.skips, tuple):
                new_skips = tuple(skip_list[op_name]) + item.skips
            elif isinstance(item.skips, list):
                new_skips = skip_list[op_name] + item.skips
            else:
                new_skips = tuple(skip_list[op_name])
            item.skips = new_skips

    for item in python_ref_db:
        op_name = item.name
        if op_name in skip_list:
            if isinstance(item.skips, tuple):
                new_skips = tuple(skip_list[op_name]) + item.skips
            elif isinstance(item.skips, list):
                new_skips = skip_list[op_name] + item.skips
            else:
                new_skips = tuple(skip_list[op_name])
            item.skips = new_skips


def get_decorators(self, test_class, test_name, device, dtype, param_kwargs):
    self.decorators = (*self.decorators, *self.skips)
    result = []
    for decorator in self.decorators:
        if isinstance(decorator, DecorateInfo):
            if decorator.is_active(test_class, test_name, device, dtype, param_kwargs):
                result.extend(decorator.decorators)
        else:
            result.append(decorator)
    return result
