// required for old g++ to compile PRId64 macros, see
// https://github.com/pytorch/pytorch/issues/3571
// for context
#ifndef __STDC_FORMAT_MACROS
#define __STDC_FORMAT_MACROS
#endif

// an external backend might generate file within its code tree
// and check all the source files within the tree with clang-format.
// so, disable it since the backend might have a different config.
// clang-format off

// NOTE: This condition is true for all PyTorch internal libraries, it
//       just excludes external projects such as torch_xla which
//       re-use some of the PyTorch codegen machinery.
#if defined(CAFFE2_BUILD_MAIN_LIB)        || \
    defined(TORCH_CUDA_BUILD_MAIN_LIB)    || \
    defined(TORCH_HIP_BUILD_MAIN_LIB)     || \
    defined(TORCH_CUDA_CU_BUILD_MAIN_LIB) || \
    defined(TORCH_CUDA_CPP_BUILD_MAIN_LIB)
#define TORCH_ASSERT_ONLY_METHOD_OPERATORS
#endif

// @generated by gen_backend_stubs.py from RegisterDispatchKey.cpp

#include <c10/core/TensorImpl.h>
#include <c10/core/Allocator.h>
#include <ATen/DeviceGuard.h>
#include <ATen/NamedTensorUtils.h>
#include <ATen/Utils.h>
#include <ATen/WrapDimUtils.h>
#include <ATen/Dispatch.h>
#include <c10/util/ExclusivelyOwned.h>
#include <c10/util/Half.h>
#include <c10/core/UndefinedTensorImpl.h>
#include <optional>
#include <ATen/Tensor.h>
#include <ATen/native/Resize.h>

#include <cstddef>
#include <functional>
#include <memory>
#include <utility>

#include <ATen/Config.h>
#include <ATen/core/op_registration/adaption.h>
#include <torch/library.h>

#include "torch_npu/csrc/core/npu/NPURecovery.h"
#ifndef BUILD_LIBTORCH
#include "torch_npu/csrc/profiler/utils.h"
#endif

#include "torch_npu/csrc/aten/NPUNativeFunctions.h"
#include "torch_npu/csrc/framework/interface/EnvVariables.h"
#include "torch_npu/csrc/aten/NPUOpApiNativeFunctions.h"
#include "torch_npu/csrc/framework/FormatHelper.h"
#include "torch_npu/csrc/framework/utils/ForceAclnnList.h"
#include "op_plugin/OpInterface.h"
#include <ATen/NativeFunctions.h>
#include <ATen/Functions.h>
#include <c10/macros/Macros.h>


// See template file RegisterDispatchDefinitions.ini
namespace at {
// NB: TORCH_LIBRARY_IMPL must be in an anonymous namespace to avoid
// ambiguity with conflicting identifiers that may have been defined in
// at namespace already.
namespace {
C10_DIAGNOSTIC_PUSH_AND_IGNORED_IF_DEFINED("-Wunused-function")
void resize_out(const Tensor &out, IntArrayRef sizes, IntArrayRef strides, const TensorOptions &options) {
  TORCH_CHECK(options.dtype() == out.dtype(),
      "Expected out tensor to have dtype ", options.dtype(), ", but got ", out.dtype(), " instead");
  TORCH_CHECK(options.device() == out.device(),
      "Expected out tensor to have device ", options.device(), ", but got ", out.device(), " instead");
  const bool resized = at::native::resize_output(out, sizes);
  // Only restride if a resize occurred; otherwise we ignore the (advisory)
  // strides from the meta function and directly use the output tensor's
  // preexisting strides
  if (resized) {
    if (!strides.empty()) {
      TORCH_INTERNAL_ASSERT(!options.memory_format_opt().has_value());
      // TODO: avoid the redispatch here
      out.as_strided_(sizes, strides);
    } else if (options.memory_format_opt().has_value()) {
      out.unsafeGetTensorImpl()->empty_tensor_restride(*options.memory_format_opt());
    }
  }
}
void check_inplace(const Tensor &self, IntArrayRef sizes, const TensorOptions &options) {
  // These checks are needed on those operators that:
  //   1) don't use 'TensorIterator' (e.g. 'addmm' and 'baddbmm')
  //   2) have particular typing rules (e.g. 'cumsum' and 'cumprod')
  // For other operators (e.g. 'add'), 'TensorIterator' already checks
  // these things separately.
  TORCH_CHECK(options.dtype() == self.dtype(),
      "Bad in-place call: ",
      "input tensor dtype ", self.dtype(), " and output tensor dtype ", options.dtype(), " should match");
  TORCH_CHECK(options.device() == self.device(),
      "Bad in-place call: ",
      "input tensor device ", self.device(), " and output tensor device ", options.device(), " should match");
  TORCH_CHECK(sizes == self.sizes(),
      "Bad in-place call: ",
      "input tensor size ", self.sizes(), " and output tensor size ", sizes, " should match");
}
C10_DIAGNOSTIC_POP()
TORCH_LIBRARY_IMPL(aten, SparseCsrPrivateUse1, m) {
};
} // anonymous namespace
namespace sparsecsrnpu {
namespace {
at::Tensor wrap_SparseCsrNPU_abs_(const at::Tensor & self) {
    return at::native::abs_sparse_csr(self);
}
at::Tensor & wrap_SparseCsrNPU_abs__(at::Tensor & self) {
    return at::native::abs_sparse_csr_(self);
}
at::Tensor & wrap_SparseCsrNPU_abs_out(const at::Tensor & self, at::Tensor & out) {
    return at::native::abs_sparse_csr_out(self, out);
}
at::Tensor wrap_SparseCsrNPU_angle_(const at::Tensor & self) {
    return at::native::angle_sparse_csr(self);
}
at::Tensor & wrap_SparseCsrNPU_angle_out(const at::Tensor & self, at::Tensor & out) {
    return at::native::angle_sparse_csr_out(self, out);
}
at::Tensor wrap_SparseCsrNPU_sgn_(const at::Tensor & self) {
    return at::native::sgn_sparse_csr(self);
}
at::Tensor & wrap_SparseCsrNPU_sgn__(at::Tensor & self) {
    return at::native::sgn_sparse_csr_(self);
}
at::Tensor & wrap_SparseCsrNPU_sgn_out(const at::Tensor & self, at::Tensor & out) {
    return at::native::sgn_sparse_csr_out(self, out);
}
at::Tensor wrap_SparseCsrNPU__conj_physical_(const at::Tensor & self) {
    return at::native::conj_physical_sparse_csr(self);
}
at::Tensor & wrap_SparseCsrNPU_conj_physical_out(const at::Tensor & self, at::Tensor & out) {
    return at::native::conj_physical_sparse_csr_out(self, out);
}
at::Tensor & wrap_SparseCsrNPU_conj_physical__(at::Tensor & self) {
    return at::native::conj_physical_sparse_csr_(self);
}
at::Tensor wrap_SparseCsrNPU_add_Tensor(const at::Tensor & self, const at::Tensor & other, const at::Scalar & alpha=1) {
    return at::native::add_sparse_csr(self, other, alpha);
}
at::Tensor & wrap_SparseCsrNPU_add__Tensor(at::Tensor & self, const at::Tensor & other, const at::Scalar & alpha=1) {
    return at::native::add_sparse_csr_(self, other, alpha);
}
at::Tensor wrap_SparseCsrNPU_asinh_(const at::Tensor & self) {
    return at::native::asinh_sparse_csr(self);
}
at::Tensor & wrap_SparseCsrNPU_asinh__(at::Tensor & self) {
    return at::native::asinh_sparse_csr_(self);
}
at::Tensor & wrap_SparseCsrNPU_asinh_out(const at::Tensor & self, at::Tensor & out) {
    return at::native::asinh_sparse_csr_out(self, out);
}
at::Tensor wrap_SparseCsrNPU_atanh_(const at::Tensor & self) {
    return at::native::atanh_sparse_csr(self);
}
at::Tensor & wrap_SparseCsrNPU_atanh__(at::Tensor & self) {
    return at::native::atanh_sparse_csr_(self);
}
at::Tensor & wrap_SparseCsrNPU_atanh_out(const at::Tensor & self, at::Tensor & out) {
    return at::native::atanh_sparse_csr_out(self, out);
}
at::Tensor wrap_SparseCsrNPU_asin_(const at::Tensor & self) {
    return at::native::asin_sparse_csr(self);
}
at::Tensor & wrap_SparseCsrNPU_asin__(at::Tensor & self) {
    return at::native::asin_sparse_csr_(self);
}
at::Tensor & wrap_SparseCsrNPU_asin_out(const at::Tensor & self, at::Tensor & out) {
    return at::native::asin_sparse_csr_out(self, out);
}
at::Tensor wrap_SparseCsrNPU_atan_(const at::Tensor & self) {
    return at::native::atan_sparse_csr(self);
}
at::Tensor & wrap_SparseCsrNPU_atan__(at::Tensor & self) {
    return at::native::atan_sparse_csr_(self);
}
at::Tensor & wrap_SparseCsrNPU_atan_out(const at::Tensor & self, at::Tensor & out) {
    return at::native::atan_sparse_csr_out(self, out);
}
at::Tensor wrap_SparseCsrNPU_ceil_(const at::Tensor & self) {
    return at::native::ceil_sparse_csr(self);
}
at::Tensor & wrap_SparseCsrNPU_ceil__(at::Tensor & self) {
    return at::native::ceil_sparse_csr_(self);
}
at::Tensor & wrap_SparseCsrNPU_ceil_out(const at::Tensor & self, at::Tensor & out) {
    return at::native::ceil_sparse_csr_out(self, out);
}
at::Tensor & wrap_SparseCsrNPU_copy__(at::Tensor & self, const at::Tensor & src, bool non_blocking=false) {
    return at::native::copy_sparse_compressed_(self, src, non_blocking);
}
at::Tensor wrap_SparseCsrNPU_empty_memory_format(at::IntArrayRef size, ::std::optional<at::ScalarType> dtype={}, ::std::optional<at::Layout> layout={}, ::std::optional<at::Device> device={}, ::std::optional<bool> pin_memory={}, ::std::optional<at::MemoryFormat> memory_format=::std::nullopt) {
    return at::native::empty_sparse_compressed(size, dtype, layout, device, pin_memory, memory_format);
}
const at::Tensor & wrap_SparseCsrNPU_resize__(const at::Tensor & self, at::IntArrayRef size, ::std::optional<at::MemoryFormat> memory_format=::std::nullopt) {
    return at::native::resize_sparse_csr_(self, size, memory_format);
}
at::Tensor wrap_SparseCsrNPU_empty_like_(const at::Tensor & self, ::std::optional<at::ScalarType> dtype={}, ::std::optional<at::Layout> layout={}, ::std::optional<at::Device> device={}, ::std::optional<bool> pin_memory={}, ::std::optional<at::MemoryFormat> memory_format=::std::nullopt) {
    return at::native::empty_like_sparse_csr(self, dtype, layout, device, pin_memory, memory_format);
}
at::Tensor wrap_SparseCsrNPU_erf_(const at::Tensor & self) {
    return at::native::erf_sparse_csr(self);
}
at::Tensor & wrap_SparseCsrNPU_erf__(at::Tensor & self) {
    return at::native::erf_sparse_csr_(self);
}
at::Tensor & wrap_SparseCsrNPU_erf_out(const at::Tensor & self, at::Tensor & out) {
    return at::native::erf_sparse_csr_out(self, out);
}
at::Tensor wrap_SparseCsrNPU_expm1_(const at::Tensor & self) {
    return at::native::expm1_sparse_csr(self);
}
at::Tensor & wrap_SparseCsrNPU_expm1__(at::Tensor & self) {
    return at::native::expm1_sparse_csr_(self);
}
at::Tensor & wrap_SparseCsrNPU_expm1_out(const at::Tensor & self, at::Tensor & out) {
    return at::native::expm1_sparse_csr_out(self, out);
}
at::Tensor & wrap_SparseCsrNPU_fill__Scalar(at::Tensor & self, const at::Scalar & value) {
    return at::native::fill_sparse_csr_(self, value);
}
at::Tensor wrap_SparseCsrNPU_floor_(const at::Tensor & self) {
    return at::native::floor_sparse_csr(self);
}
at::Tensor & wrap_SparseCsrNPU_floor__(at::Tensor & self) {
    return at::native::floor_sparse_csr_(self);
}
at::Tensor & wrap_SparseCsrNPU_floor_out(const at::Tensor & self, at::Tensor & out) {
    return at::native::floor_sparse_csr_out(self, out);
}
at::Tensor wrap_SparseCsrNPU_frac_(const at::Tensor & self) {
    return at::native::frac_sparse_csr(self);
}
at::Tensor & wrap_SparseCsrNPU_frac__(at::Tensor & self) {
    return at::native::frac_sparse_csr_(self);
}
at::Tensor & wrap_SparseCsrNPU_frac_out(const at::Tensor & self, at::Tensor & out) {
    return at::native::frac_sparse_csr_out(self, out);
}
at::Tensor wrap_SparseCsrNPU_isnan_(const at::Tensor & self) {
    return at::native::isnan_sparse_csr(self);
}
at::Tensor wrap_SparseCsrNPU_log1p_(const at::Tensor & self) {
    return at::native::log1p_sparse_csr(self);
}
at::Tensor & wrap_SparseCsrNPU_log1p__(at::Tensor & self) {
    return at::native::log1p_sparse_csr_(self);
}
at::Tensor & wrap_SparseCsrNPU_log1p_out(const at::Tensor & self, at::Tensor & out) {
    return at::native::log1p_sparse_csr_out(self, out);
}
at::Tensor wrap_SparseCsrNPU_mm_(const at::Tensor & self, const at::Tensor & mat2) {
    return at::native::_sparse_csr_mm(self, mat2);
}
at::Tensor & wrap_SparseCsrNPU_mm_out(const at::Tensor & self, const at::Tensor & mat2, at::Tensor & out) {
    return at::native::_sparse_csr_mm_out(self, mat2, out);
}
at::Tensor wrap_SparseCsrNPU_mul_Tensor(const at::Tensor & self, const at::Tensor & other) {
    return at::native::mul_sparse_csr(self, other);
}
at::Tensor & wrap_SparseCsrNPU_mul__Tensor(at::Tensor & self, const at::Tensor & other) {
    return at::native::mul_sparse_csr_(self, other);
}
at::Tensor & wrap_SparseCsrNPU_mul_out(const at::Tensor & self, const at::Tensor & other, at::Tensor & out) {
    return at::native::mul_out_sparse_csr(self, other, out);
}
at::Tensor wrap_SparseCsrNPU_mul_Scalar(const at::Tensor & self, const at::Scalar & other) {
    return at::native::mul_scalar_sparse_csr(self, other);
}
at::Tensor & wrap_SparseCsrNPU_mul__Scalar(at::Tensor & self, const at::Scalar & other) {
    return at::native::mul__scalar_sparse_csr(self, other);
}
at::Tensor wrap_SparseCsrNPU_rad2deg_(const at::Tensor & self) {
    return at::native::rad2deg_sparse_csr(self);
}
at::Tensor & wrap_SparseCsrNPU_rad2deg__(at::Tensor & self) {
    return at::native::rad2deg_sparse_csr_(self);
}
at::Tensor & wrap_SparseCsrNPU_rad2deg_out(const at::Tensor & self, at::Tensor & out) {
    return at::native::rad2deg_sparse_csr_out(self, out);
}
at::Tensor wrap_SparseCsrNPU_deg2rad_(const at::Tensor & self) {
    return at::native::deg2rad_sparse_csr(self);
}
at::Tensor & wrap_SparseCsrNPU_deg2rad__(at::Tensor & self) {
    return at::native::deg2rad_sparse_csr_(self);
}
at::Tensor & wrap_SparseCsrNPU_deg2rad_out(const at::Tensor & self, at::Tensor & out) {
    return at::native::deg2rad_sparse_csr_out(self, out);
}
at::Tensor wrap_SparseCsrNPU_neg_(const at::Tensor & self) {
    return at::native::neg_sparse_csr(self);
}
at::Tensor & wrap_SparseCsrNPU_neg__(at::Tensor & self) {
    return at::native::neg_sparse_csr_(self);
}
at::Tensor & wrap_SparseCsrNPU_neg_out(const at::Tensor & self, at::Tensor & out) {
    return at::native::neg_sparse_csr_out(self, out);
}
at::Tensor wrap_SparseCsrNPU_round_(const at::Tensor & self) {
    return at::native::round_sparse_csr(self);
}
at::Tensor & wrap_SparseCsrNPU_round__(at::Tensor & self) {
    return at::native::round_sparse_csr_(self);
}
at::Tensor & wrap_SparseCsrNPU_round_out(const at::Tensor & self, at::Tensor & out) {
    return at::native::round_sparse_csr_out(self, out);
}
at::Tensor wrap_SparseCsrNPU_relu_(const at::Tensor & self) {
    return at::native::relu_sparse_csr(self);
}
at::Tensor & wrap_SparseCsrNPU_relu__(at::Tensor & self) {
    return at::native::relu_sparse_csr_(self);
}
at::Tensor wrap_SparseCsrNPU_select_int(const at::Tensor & self, int64_t dim, int64_t index) {
    return at::native::select_sparse_csr(self, dim, index);
}
at::Tensor wrap_SparseCsrNPU_sin_(const at::Tensor & self) {
    return at::native::sin_sparse_csr(self);
}
at::Tensor & wrap_SparseCsrNPU_sin__(at::Tensor & self) {
    return at::native::sin_sparse_csr_(self);
}
at::Tensor & wrap_SparseCsrNPU_sin_out(const at::Tensor & self, at::Tensor & out) {
    return at::native::sin_sparse_csr_out(self, out);
}
at::Tensor wrap_SparseCsrNPU_sinh_(const at::Tensor & self) {
    return at::native::sinh_sparse_csr(self);
}
at::Tensor & wrap_SparseCsrNPU_sinh__(at::Tensor & self) {
    return at::native::sinh_sparse_csr_(self);
}
at::Tensor & wrap_SparseCsrNPU_sinh_out(const at::Tensor & self, at::Tensor & out) {
    return at::native::sinh_sparse_csr_out(self, out);
}
at::Tensor wrap_SparseCsrNPU_sum_(const at::Tensor & self, ::std::optional<at::ScalarType> dtype=::std::nullopt) {
    return at::native::sum_csr(self, dtype);
}
at::Tensor wrap_SparseCsrNPU_sum_dim_IntList(const at::Tensor & self, at::OptionalIntArrayRef dim, bool keepdim=false, ::std::optional<at::ScalarType> dtype=::std::nullopt) {
    return at::native::sum_sparse_compressed(self, dim, keepdim, dtype);
}
at::Tensor wrap_SparseCsrNPU_sqrt_(const at::Tensor & self) {
    return at::native::sqrt_sparse_csr(self);
}
at::Tensor & wrap_SparseCsrNPU_sqrt__(at::Tensor & self) {
    return at::native::sqrt_sparse_csr_(self);
}
at::Tensor & wrap_SparseCsrNPU_sqrt_out(const at::Tensor & self, at::Tensor & out) {
    return at::native::sqrt_sparse_csr_out(self, out);
}
at::Tensor wrap_SparseCsrNPU_tan_(const at::Tensor & self) {
    return at::native::tan_sparse_csr(self);
}
at::Tensor & wrap_SparseCsrNPU_tan__(at::Tensor & self) {
    return at::native::tan_sparse_csr_(self);
}
at::Tensor & wrap_SparseCsrNPU_tan_out(const at::Tensor & self, at::Tensor & out) {
    return at::native::tan_sparse_csr_out(self, out);
}
at::Tensor wrap_SparseCsrNPU_tanh_(const at::Tensor & self) {
    return at::native::tanh_sparse_csr(self);
}
at::Tensor & wrap_SparseCsrNPU_tanh__(at::Tensor & self) {
    return at::native::tanh_sparse_csr_(self);
}
at::Tensor & wrap_SparseCsrNPU_tanh_out(const at::Tensor & self, at::Tensor & out) {
    return at::native::tanh_sparse_csr_out(self, out);
}
at::Tensor & wrap_SparseCsrNPU_threshold_backward_grad_input(const at::Tensor & grad_output, const at::Tensor & self, const at::Scalar & threshold, at::Tensor & grad_input) {
    return at::native::threshold_backward_sparse_compressed_out(grad_output, self, threshold, grad_input);
}
at::Tensor wrap_SparseCsrNPU_threshold_backward_(const at::Tensor & grad_output, const at::Tensor & self, const at::Scalar & threshold) {
    return at::native::threshold_backward_sparse_compressed(grad_output, self, threshold);
}
at::Tensor wrap_SparseCsrNPU_trunc_(const at::Tensor & self) {
    return at::native::trunc_sparse_csr(self);
}
at::Tensor & wrap_SparseCsrNPU_trunc__(at::Tensor & self) {
    return at::native::trunc_sparse_csr_(self);
}
at::Tensor & wrap_SparseCsrNPU_trunc_out(const at::Tensor & self, at::Tensor & out) {
    return at::native::trunc_sparse_csr_out(self, out);
}
at::Tensor wrap_SparseCsrNPU_clone_(const at::Tensor & self, ::std::optional<at::MemoryFormat> memory_format=::std::nullopt) {
    return at::native::clone_sparse_compressed(self, memory_format);
}
const at::Tensor & wrap_SparseCsrNPU_resize_as_sparse__(const at::Tensor & self, const at::Tensor & the_template) {
    return at::native::resize_as_sparse_compressed_(self, the_template);
}
at::Tensor & wrap_SparseCsrNPU_zero__(at::Tensor & self) {
    return at::native::zero_sparse_csr_(self);
}
at::Tensor wrap_SparseCsrNPU_addmm_(const at::Tensor & self, const at::Tensor & mat1, const at::Tensor & mat2, const at::Scalar & beta=1, const at::Scalar & alpha=1) {
    return at::native::addmm_sparse_compressed_dense(self, mat1, mat2, beta, alpha);
}
at::Tensor wrap_SparseCsrNPU_sparse_mask_(const at::Tensor & self, const at::Tensor & mask) {
    return at::native::sparse_mask_sparse_compressed(self, mask);
}
at::Tensor wrap_SparseCsrNPU__to_dense_(const at::Tensor & self, ::std::optional<at::ScalarType> dtype=::std::nullopt, ::std::optional<bool> masked_grad=::std::nullopt) {
    return at::native::sparse_compressed_to_dense(self, dtype, masked_grad);
}
int64_t wrap_SparseCsrNPU_sparse_dim_(const at::Tensor & self) {
    return at::native::sparse_dim_sparse_csr(self);
}
int64_t wrap_SparseCsrNPU_dense_dim_(const at::Tensor & self) {
    return at::native::dense_dim_sparse_csr(self);
}
int64_t wrap_SparseCsrNPU__nnz_(const at::Tensor & self) {
    return at::native::_nnz_sparse_csr(self);
}
at::Tensor wrap_SparseCsrNPU_values_(const at::Tensor & self) {
    return at::native::values_sparse_csr(self);
}
at::Tensor wrap_SparseCsrNPU_crow_indices_(const at::Tensor & self) {
    return at::native::crow_indices_sparse_csr(self);
}
at::Tensor wrap_SparseCsrNPU_col_indices_(const at::Tensor & self) {
    return at::native::col_indices_sparse_csr(self);
}
at::Tensor wrap_SparseCsrNPU_ccol_indices_(const at::Tensor & self) {
    return at::native::ccol_indices_sparse_csr(self);
}
at::Tensor wrap_SparseCsrNPU_row_indices_(const at::Tensor & self) {
    return at::native::row_indices_sparse_csr(self);
}
at::Tensor wrap_SparseCsrNPU__to_sparse_sparse_dim(const at::Tensor & self, int64_t sparse_dim) {
    return at::native::sparse_compressed_to_sparse(self, sparse_dim);
}
at::Tensor wrap_SparseCsrNPU__to_sparse_(const at::Tensor & self, ::std::optional<at::Layout> layout=::std::nullopt, at::OptionalIntArrayRef blocksize=::std::nullopt, ::std::optional<int64_t> dense_dim=::std::nullopt) {
    return at::native::sparse_compressed_to_sparse(self, layout, blocksize, dense_dim);
}
at::Tensor wrap_SparseCsrNPU__to_sparse_csr_(const at::Tensor & self, ::std::optional<int64_t> dense_dim=::std::nullopt) {
    return at::native::sparse_compressed_to_sparse_csr(self, dense_dim);
}
at::Tensor wrap_SparseCsrNPU__to_sparse_csc_(const at::Tensor & self, ::std::optional<int64_t> dense_dim=::std::nullopt) {
    return at::native::sparse_compressed_to_sparse_csc(self, dense_dim);
}
at::Tensor wrap_SparseCsrNPU__to_sparse_bsr_(const at::Tensor & self, at::IntArrayRef blocksize, ::std::optional<int64_t> dense_dim=::std::nullopt) {
    return at::native::sparse_compressed_to_sparse_bsr(self, blocksize, dense_dim);
}
at::Tensor wrap_SparseCsrNPU__to_sparse_bsc_(const at::Tensor & self, at::IntArrayRef blocksize, ::std::optional<int64_t> dense_dim=::std::nullopt) {
    return at::native::sparse_compressed_to_sparse_bsc(self, blocksize, dense_dim);
}
at::Tensor wrap_SparseCsrNPU_erfinv_(const at::Tensor & self) {
    return at::native::erfinv_sparse_csr(self);
}
at::Tensor & wrap_SparseCsrNPU_erfinv__(at::Tensor & self) {
    return at::native::erfinv_sparse_csr_(self);
}
at::Tensor & wrap_SparseCsrNPU_erfinv_out(const at::Tensor & self, at::Tensor & out) {
    return at::native::erfinv_sparse_csr_out(self, out);
}
at::Tensor wrap_SparseCsrNPU_sign_(const at::Tensor & self) {
    return at::native::sign_sparse_csr(self);
}
at::Tensor & wrap_SparseCsrNPU_sign__(at::Tensor & self) {
    return at::native::sign_sparse_csr_(self);
}
at::Tensor & wrap_SparseCsrNPU_sign_out(const at::Tensor & self, at::Tensor & out) {
    return at::native::sign_sparse_csr_out(self, out);
}
at::Tensor wrap_SparseCsrNPU_signbit_(const at::Tensor & self) {
    return at::native::signbit_sparse_csr(self);
}
at::Tensor & wrap_SparseCsrNPU_signbit_out(const at::Tensor & self, at::Tensor & out) {
    return at::native::signbit_sparse_csr_out(self, out);
}
at::Tensor & wrap_SparseCsrNPU_normal__(at::Tensor & self, double mean=0, double std=1, ::std::optional<at::Generator> generator=::std::nullopt) {
    return at::native::normal_sparse_csr_(self, mean, std, generator);
}
at::Tensor wrap_SparseCsrNPU_isinf_(const at::Tensor & self) {
    return at::native::isinf_sparse_csr(self);
}
at::Tensor wrap_SparseCsrNPU_isposinf_(const at::Tensor & self) {
    return at::native::isposinf_sparse_csr(self);
}
at::Tensor & wrap_SparseCsrNPU_isposinf_out(const at::Tensor & self, at::Tensor & out) {
    return at::native::isposinf_sparse_csr_out(self, out);
}
at::Tensor wrap_SparseCsrNPU_isneginf_(const at::Tensor & self) {
    return at::native::isneginf_sparse_csr(self);
}
at::Tensor & wrap_SparseCsrNPU_isneginf_out(const at::Tensor & self, at::Tensor & out) {
    return at::native::isneginf_sparse_csr_out(self, out);
}
at::Tensor wrap_SparseCsrNPU_select_copy_int(const at::Tensor & self, int64_t dim, int64_t index) {
    return at::native::select_copy_sparse_csr(self, dim, index);
}
TORCH_LIBRARY_IMPL(aten, SparseCsrPrivateUse1, m) {
m.impl("abs", TORCH_FN(wrap_SparseCsrNPU_abs_));
m.impl("abs_", TORCH_FN(wrap_SparseCsrNPU_abs__));
m.impl("abs.out", TORCH_FN(wrap_SparseCsrNPU_abs_out));
m.impl("angle", TORCH_FN(wrap_SparseCsrNPU_angle_));
m.impl("angle.out", TORCH_FN(wrap_SparseCsrNPU_angle_out));
m.impl("sgn", TORCH_FN(wrap_SparseCsrNPU_sgn_));
m.impl("sgn_", TORCH_FN(wrap_SparseCsrNPU_sgn__));
m.impl("sgn.out", TORCH_FN(wrap_SparseCsrNPU_sgn_out));
m.impl("_conj_physical", TORCH_FN(wrap_SparseCsrNPU__conj_physical_));
m.impl("conj_physical.out", TORCH_FN(wrap_SparseCsrNPU_conj_physical_out));
m.impl("conj_physical_", TORCH_FN(wrap_SparseCsrNPU_conj_physical__));
m.impl("add.Tensor", TORCH_FN(wrap_SparseCsrNPU_add_Tensor));
m.impl("add_.Tensor", TORCH_FN(wrap_SparseCsrNPU_add__Tensor));
m.impl("asinh", TORCH_FN(wrap_SparseCsrNPU_asinh_));
m.impl("asinh_", TORCH_FN(wrap_SparseCsrNPU_asinh__));
m.impl("asinh.out", TORCH_FN(wrap_SparseCsrNPU_asinh_out));
m.impl("atanh", TORCH_FN(wrap_SparseCsrNPU_atanh_));
m.impl("atanh_", TORCH_FN(wrap_SparseCsrNPU_atanh__));
m.impl("atanh.out", TORCH_FN(wrap_SparseCsrNPU_atanh_out));
m.impl("asin", TORCH_FN(wrap_SparseCsrNPU_asin_));
m.impl("asin_", TORCH_FN(wrap_SparseCsrNPU_asin__));
m.impl("asin.out", TORCH_FN(wrap_SparseCsrNPU_asin_out));
m.impl("atan", TORCH_FN(wrap_SparseCsrNPU_atan_));
m.impl("atan_", TORCH_FN(wrap_SparseCsrNPU_atan__));
m.impl("atan.out", TORCH_FN(wrap_SparseCsrNPU_atan_out));
m.impl("ceil", TORCH_FN(wrap_SparseCsrNPU_ceil_));
m.impl("ceil_", TORCH_FN(wrap_SparseCsrNPU_ceil__));
m.impl("ceil.out", TORCH_FN(wrap_SparseCsrNPU_ceil_out));
m.impl("copy_", TORCH_FN(wrap_SparseCsrNPU_copy__));
m.impl("empty.memory_format", TORCH_FN(wrap_SparseCsrNPU_empty_memory_format));
m.impl("resize_", TORCH_FN(wrap_SparseCsrNPU_resize__));
m.impl("empty_like", TORCH_FN(wrap_SparseCsrNPU_empty_like_));
m.impl("erf", TORCH_FN(wrap_SparseCsrNPU_erf_));
m.impl("erf_", TORCH_FN(wrap_SparseCsrNPU_erf__));
m.impl("erf.out", TORCH_FN(wrap_SparseCsrNPU_erf_out));
m.impl("expm1", TORCH_FN(wrap_SparseCsrNPU_expm1_));
m.impl("expm1_", TORCH_FN(wrap_SparseCsrNPU_expm1__));
m.impl("expm1.out", TORCH_FN(wrap_SparseCsrNPU_expm1_out));
m.impl("fill_.Scalar", TORCH_FN(wrap_SparseCsrNPU_fill__Scalar));
m.impl("floor", TORCH_FN(wrap_SparseCsrNPU_floor_));
m.impl("floor_", TORCH_FN(wrap_SparseCsrNPU_floor__));
m.impl("floor.out", TORCH_FN(wrap_SparseCsrNPU_floor_out));
m.impl("frac", TORCH_FN(wrap_SparseCsrNPU_frac_));
m.impl("frac_", TORCH_FN(wrap_SparseCsrNPU_frac__));
m.impl("frac.out", TORCH_FN(wrap_SparseCsrNPU_frac_out));
m.impl("isnan", TORCH_FN(wrap_SparseCsrNPU_isnan_));
m.impl("log1p", TORCH_FN(wrap_SparseCsrNPU_log1p_));
m.impl("log1p_", TORCH_FN(wrap_SparseCsrNPU_log1p__));
m.impl("log1p.out", TORCH_FN(wrap_SparseCsrNPU_log1p_out));
m.impl("mm", TORCH_FN(wrap_SparseCsrNPU_mm_));
m.impl("mm.out", TORCH_FN(wrap_SparseCsrNPU_mm_out));
m.impl("mul.Tensor", TORCH_FN(wrap_SparseCsrNPU_mul_Tensor));
m.impl("mul_.Tensor", TORCH_FN(wrap_SparseCsrNPU_mul__Tensor));
m.impl("mul.out", TORCH_FN(wrap_SparseCsrNPU_mul_out));
m.impl("mul.Scalar", TORCH_FN(wrap_SparseCsrNPU_mul_Scalar));
m.impl("mul_.Scalar", TORCH_FN(wrap_SparseCsrNPU_mul__Scalar));
m.impl("rad2deg", TORCH_FN(wrap_SparseCsrNPU_rad2deg_));
m.impl("rad2deg_", TORCH_FN(wrap_SparseCsrNPU_rad2deg__));
m.impl("rad2deg.out", TORCH_FN(wrap_SparseCsrNPU_rad2deg_out));
m.impl("deg2rad", TORCH_FN(wrap_SparseCsrNPU_deg2rad_));
m.impl("deg2rad_", TORCH_FN(wrap_SparseCsrNPU_deg2rad__));
m.impl("deg2rad.out", TORCH_FN(wrap_SparseCsrNPU_deg2rad_out));
m.impl("neg", TORCH_FN(wrap_SparseCsrNPU_neg_));
m.impl("neg_", TORCH_FN(wrap_SparseCsrNPU_neg__));
m.impl("neg.out", TORCH_FN(wrap_SparseCsrNPU_neg_out));
m.impl("round", TORCH_FN(wrap_SparseCsrNPU_round_));
m.impl("round_", TORCH_FN(wrap_SparseCsrNPU_round__));
m.impl("round.out", TORCH_FN(wrap_SparseCsrNPU_round_out));
m.impl("relu", TORCH_FN(wrap_SparseCsrNPU_relu_));
m.impl("relu_", TORCH_FN(wrap_SparseCsrNPU_relu__));
m.impl("select.int", TORCH_FN(wrap_SparseCsrNPU_select_int));
m.impl("sin", TORCH_FN(wrap_SparseCsrNPU_sin_));
m.impl("sin_", TORCH_FN(wrap_SparseCsrNPU_sin__));
m.impl("sin.out", TORCH_FN(wrap_SparseCsrNPU_sin_out));
m.impl("sinh", TORCH_FN(wrap_SparseCsrNPU_sinh_));
m.impl("sinh_", TORCH_FN(wrap_SparseCsrNPU_sinh__));
m.impl("sinh.out", TORCH_FN(wrap_SparseCsrNPU_sinh_out));
m.impl("sum", TORCH_FN(wrap_SparseCsrNPU_sum_));
m.impl("sum.dim_IntList", TORCH_FN(wrap_SparseCsrNPU_sum_dim_IntList));
m.impl("sqrt", TORCH_FN(wrap_SparseCsrNPU_sqrt_));
m.impl("sqrt_", TORCH_FN(wrap_SparseCsrNPU_sqrt__));
m.impl("sqrt.out", TORCH_FN(wrap_SparseCsrNPU_sqrt_out));
m.impl("tan", TORCH_FN(wrap_SparseCsrNPU_tan_));
m.impl("tan_", TORCH_FN(wrap_SparseCsrNPU_tan__));
m.impl("tan.out", TORCH_FN(wrap_SparseCsrNPU_tan_out));
m.impl("tanh", TORCH_FN(wrap_SparseCsrNPU_tanh_));
m.impl("tanh_", TORCH_FN(wrap_SparseCsrNPU_tanh__));
m.impl("tanh.out", TORCH_FN(wrap_SparseCsrNPU_tanh_out));
m.impl("threshold_backward.grad_input", TORCH_FN(wrap_SparseCsrNPU_threshold_backward_grad_input));
m.impl("threshold_backward", TORCH_FN(wrap_SparseCsrNPU_threshold_backward_));
m.impl("trunc", TORCH_FN(wrap_SparseCsrNPU_trunc_));
m.impl("trunc_", TORCH_FN(wrap_SparseCsrNPU_trunc__));
m.impl("trunc.out", TORCH_FN(wrap_SparseCsrNPU_trunc_out));
m.impl("clone", TORCH_FN(wrap_SparseCsrNPU_clone_));
m.impl("resize_as_sparse_", TORCH_FN(wrap_SparseCsrNPU_resize_as_sparse__));
m.impl("zero_", TORCH_FN(wrap_SparseCsrNPU_zero__));
m.impl("addmm", TORCH_FN(wrap_SparseCsrNPU_addmm_));
m.impl("sparse_mask", TORCH_FN(wrap_SparseCsrNPU_sparse_mask_));
m.impl("_to_dense", TORCH_FN(wrap_SparseCsrNPU__to_dense_));
m.impl("sparse_dim", TORCH_FN(wrap_SparseCsrNPU_sparse_dim_));
m.impl("dense_dim", TORCH_FN(wrap_SparseCsrNPU_dense_dim_));
m.impl("_nnz", TORCH_FN(wrap_SparseCsrNPU__nnz_));
m.impl("values", TORCH_FN(wrap_SparseCsrNPU_values_));
m.impl("crow_indices", TORCH_FN(wrap_SparseCsrNPU_crow_indices_));
m.impl("col_indices", TORCH_FN(wrap_SparseCsrNPU_col_indices_));
m.impl("ccol_indices", TORCH_FN(wrap_SparseCsrNPU_ccol_indices_));
m.impl("row_indices", TORCH_FN(wrap_SparseCsrNPU_row_indices_));
m.impl("_to_sparse.sparse_dim", TORCH_FN(wrap_SparseCsrNPU__to_sparse_sparse_dim));
m.impl("_to_sparse", TORCH_FN(wrap_SparseCsrNPU__to_sparse_));
m.impl("_to_sparse_csr", TORCH_FN(wrap_SparseCsrNPU__to_sparse_csr_));
m.impl("_to_sparse_csc", TORCH_FN(wrap_SparseCsrNPU__to_sparse_csc_));
m.impl("_to_sparse_bsr", TORCH_FN(wrap_SparseCsrNPU__to_sparse_bsr_));
m.impl("_to_sparse_bsc", TORCH_FN(wrap_SparseCsrNPU__to_sparse_bsc_));
m.impl("erfinv", TORCH_FN(wrap_SparseCsrNPU_erfinv_));
m.impl("erfinv_", TORCH_FN(wrap_SparseCsrNPU_erfinv__));
m.impl("erfinv.out", TORCH_FN(wrap_SparseCsrNPU_erfinv_out));
m.impl("sign", TORCH_FN(wrap_SparseCsrNPU_sign_));
m.impl("sign_", TORCH_FN(wrap_SparseCsrNPU_sign__));
m.impl("sign.out", TORCH_FN(wrap_SparseCsrNPU_sign_out));
m.impl("signbit", TORCH_FN(wrap_SparseCsrNPU_signbit_));
m.impl("signbit.out", TORCH_FN(wrap_SparseCsrNPU_signbit_out));
m.impl("normal_", TORCH_FN(wrap_SparseCsrNPU_normal__));
m.impl("isinf", TORCH_FN(wrap_SparseCsrNPU_isinf_));
m.impl("isposinf", TORCH_FN(wrap_SparseCsrNPU_isposinf_));
m.impl("isposinf.out", TORCH_FN(wrap_SparseCsrNPU_isposinf_out));
m.impl("isneginf", TORCH_FN(wrap_SparseCsrNPU_isneginf_));
m.impl("isneginf.out", TORCH_FN(wrap_SparseCsrNPU_isneginf_out));
m.impl("select_copy.int", TORCH_FN(wrap_SparseCsrNPU_select_copy_int));
}
}
} // namespace sparsecsrnpu
} // namespace at
